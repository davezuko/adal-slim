{"version":3,"file":"adal.modern.js","sources":["../../lib/storage.ts","../../lib/logger.ts","../../lib/adal.ts"],"sourcesContent":["export enum StorageKey {\n    TOKEN_KEYS = \"adal.token.keys\",\n    ACCESS_TOKEN_KEY = \"adal.access.token.key\",\n    EXPIRATION_KEY = \"adal.expiration.key\",\n    STATE_LOGIN = \"adal.state.login\",\n    STATE_RENEW = \"adal.state.renew\",\n    NONCE_IDTOKEN = \"adal.nonce.idtoken\",\n    SESSION_STATE = \"adal.session.state\",\n    USERNAME = \"adal.username\",\n    IDTOKEN = \"adal.idtoken\",\n    ERROR = \"adal.error\",\n    ERROR_DESCRIPTION = \"adal.error.description\",\n    LOGIN_REQUEST = \"adal.login.request\",\n    LOGIN_ERROR = \"adal.login.error\",\n    RENEW_STATUS = \"adal.token.renew.status\",\n}\n\ninterface IStorage {\n    getItem(key: string): any\n    setItem(key: string, value: any, preserve?: boolean): void\n}\n\nexport const Storage: IStorage = (() => {\n    function supportsStorage(type: string) {\n        const storage = window[type]\n        if (!storage) {\n            return false\n        }\n        const testKey = \"__test__\"\n        storage.setItem(testKey, testKey)\n        if (storage.getItem(testKey) !== testKey) {\n            return false\n        }\n        storage.removeItem(testKey)\n        if (storage.getItem(testKey)) {\n            return false\n        }\n        return true\n    }\n\n    if (supportsStorage(\"localStorage\")) return localStorage\n    if (supportsStorage(\"sessionStorage\")) return sessionStorage\n    return {getItem() {}, setItem() {}} as IStorage\n})()\n","export enum LogLevel {\n    Error = 0,\n    Warn,\n    Info,\n    Verbose,\n}\n\nconst LOG_LEVEL_LABELS = {\n    [LogLevel.Error]: \"ERROR\",\n    [LogLevel.Warn]: \"WARNING\",\n    [LogLevel.Info]: \"INFO\",\n    [LogLevel.Verbose]: \"VERBOSE\",\n}\n\nexport const Logger = {\n    pii: false,\n    correlationId: undefined,\n    level: LogLevel.Error,\n\n    /**\n     * Checks the Logging Level, constructs the Log message and logs it. Users need to implement/override this method to turn on Logging.\n     * @param {number} level  -  Level can be set 0,1,2 and 3 which turns on 'error', 'warning', 'info' or 'verbose' level logging respectively.\n     * @param {string} message  -  Message to log.\n     * @param {string} error  -  Error to log.\n     */\n    log(\n        level: LogLevel,\n        message: string,\n        error: Error | string | undefined | null,\n        containsPii = false,\n    ) {\n        if (containsPii && !this.pii) return\n\n        if (level <= this.level) {\n            let timestamp = new Date().toUTCString()\n            let formattedMessage =\n                timestamp +\n                \":\" +\n                (this.correlationId ? this.correlationId + \"-\" : \"\") +\n                LOG_LEVEL_LABELS[level] +\n                \": \" +\n                message\n\n            if (error) {\n                // @ts-expect-error\n                formattedMessage += \"\\nstack:\\n\" + error.stack\n            }\n\n            console.log(formattedMessage)\n        }\n    },\n\n    /**\n     * Logs messages when Logging Level is set to 0.\n     * @param {string} message  -  Message to log.\n     * @param {string} error  -  Error to log.\n     */\n    error(message: string, error?: Error) {\n        this.log(LogLevel.Error, message, error)\n    },\n\n    /**\n     * Logs messages when Logging Level is set to 1.\n     * @param {string} message  -  Message to log.\n     */\n    warn(message: string) {\n        this.log(LogLevel.Warn, message, null)\n    },\n\n    /**\n     * Logs messages when Logging Level is set to 2.\n     * @param {string} message  -  Message to log.\n     */\n    info(message: string) {\n        this.log(LogLevel.Info, message, null)\n    },\n\n    /**\n     * Logs messages when Logging Level is set to 3.\n     * @param {string} message  -  Message to log.\n     */\n    verbose(message: string) {\n        this.log(LogLevel.Verbose, message, null)\n    },\n\n    /**\n     * Logs Pii messages when Logging Level is set to 0 and window.piiLoggingEnabled is set to true.\n     * @param {string} message  -  Message to log.\n     * @param {string} error  -  Error to log.\n     */\n    errorPii(message: string, error: string) {\n        this.log(LogLevel.Error, message, error, true)\n    },\n\n    /**\n     * Logs  Pii messages when Logging Level is set to 1 and window.piiLoggingEnabled is set to true.\n     * @param {string} message  -  Message to log.\n     */\n    warnPii(message: string) {\n        this.log(LogLevel.Warn, message, null, true)\n    },\n\n    /**\n     * Logs messages when Logging Level is set to 2 and window.piiLoggingEnabled is set to true.\n     * @param {string} message  -  Message to log.\n     */\n    infoPii(message: string) {\n        this.log(LogLevel.Info, message, null, true)\n    },\n\n    /**\n     * Logs messages when Logging Level is set to 3 and window.piiLoggingEnabled is set to true.\n     * @param {string} message  -  Message to log.\n     */\n    verbosePii(message: string) {\n        this.log(LogLevel.Verbose, message, null, true)\n    },\n}\n","// AdalJS v1.0.17\n//----------------------------------------------------------------------\n// @preserve Copyright (c) Microsoft Open Technologies, Inc.\n// All Rights Reserved\n// Apache License 2.0\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//id\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//----------------------------------------------------------------------\nimport {Storage, StorageKey} from \"./storage\"\nimport {Logger} from \"./logger\"\n\nenum RequestType {\n    LOGIN = \"LOGIN\",\n    RENEW_TOKEN = \"RENEW_TOKEN\",\n    UNKNOWN = \"UNKNOWN\",\n}\nenum ResponseType {\n    ID_TOKEN = \"id_token token\",\n    TOKEN = \"token\",\n}\n\nenum TokenRenewStatus {\n    Canceled = \"Canceled\",\n    Completed = \"Completed\",\n    InProgress = \"In Progress\",\n}\n\nconst ACCESS_TOKEN = \"access_token\",\n    EXPIRES_IN = \"expires_in\",\n    ID_TOKEN = \"id_token\",\n    ERROR = \"error\",\n    ERROR_DESCRIPTION = \"error_description\",\n    SESSION_STATE = \"session_state\",\n    RESOURCE_DELIMETER = \"|\",\n    CACHE_DELIMETER = \"||\"\n\ntype Config = any\ntype Options = any\nexport class Adal {\n    config: Config\n\n    // TODO: move off of instance for smaller property names\n    _user: any\n    _idTokenNonce: any\n    _activeRenewals: any = {}\n    _loginInProgress = false\n    _acquireTokenInProgress = false\n    _renewStates: any[] = []\n    _openedWindows: any[] = []\n    _callBackMappedToRenewStates: any = {}\n    _callBacksMappedToRenewStates: any = {}\n    _requestType = RequestType.LOGIN\n\n    constructor(options: Options) {\n        if ((window as any)._adalInstance) {\n            return (window as any)._adalInstance\n        }\n        this.config = {\n            popUp: false,\n            instance: \"https://login.microsoftonline.com/\",\n            loginResource: options.clientId,\n            laodFrameTimeout: 6000,\n            expireOffsetSeconds: 300,\n            anonymousEndpoints: [],\n            navigateToLoginRequestUrl: true,\n            tenant: \"common\",\n            redirectUri: window.location.href.split(\"?\")[0].split(\"#\")[0],\n            callback: () => {},\n            ...options,\n        }\n        if (DEBUG) {\n            Logger.correlationId = options.correlationId\n        }\n        ;(window as any)._adalInstance = this\n    }\n\n    /**\n     * Initiates the login process by redirecting the user to Azure AD authorization endpoint.\n     */\n    login() {\n        if (this._loginInProgress) {\n            if (DEBUG) {\n                Logger.info(\"Login in progress\")\n            }\n            return\n        }\n\n        this._loginInProgress = true\n\n        // Token is not present and user needs to login\n        const expectedState = guid()\n        const loginStartPage = window.location.href\n        this.config.state = expectedState\n        this._idTokenNonce = guid()\n\n        if (DEBUG) {\n            Logger.verbose(\n                \"Expected state: \" +\n                    expectedState +\n                    \" startPage:\" +\n                    loginStartPage,\n            )\n        }\n        saveItem(StorageKey.LOGIN_REQUEST, loginStartPage)\n        saveItem(StorageKey.LOGIN_ERROR, \"\")\n        saveItem(StorageKey.STATE_LOGIN, expectedState, true)\n        saveItem(StorageKey.NONCE_IDTOKEN, this._idTokenNonce, true)\n        saveItem(StorageKey.ERROR, \"\")\n        saveItem(StorageKey.ERROR_DESCRIPTION, \"\")\n        var urlNavigate =\n            this._getNavigateUrl(\"id_token\") +\n            \"&nonce=\" +\n            encodeURIComponent(this._idTokenNonce)\n\n        if (this.config.displayCall) {\n            // User defined way of handling the navigation\n            this.config.displayCall(urlNavigate)\n        } else if (this.config.popUp) {\n            saveItem(StorageKey.STATE_LOGIN, \"\") // so requestInfo does not match redirect case\n            this._renewStates.push(expectedState)\n            this.registerCallback(\n                expectedState,\n                this.config.clientId,\n                this.config.callback,\n            )\n            this._loginPopup(urlNavigate)\n        } else {\n            this.promptUser(urlNavigate)\n        }\n    }\n\n    /**\n     * Configures popup window for login.\n     * @ignore\n     */\n    _openPopup(\n        urlNavigate: string,\n        title: string,\n        popUpWidth: number,\n        popUpHeight: number,\n    ) {\n        try {\n            const left = window.innerWidth / 2 - popUpWidth / 2 + window.screenX\n            const top =\n                window.innerHeight / 2 - popUpHeight / 2 + window.screenY\n            const popupWindow = window.open(\n                urlNavigate,\n                title,\n                \"width=\" +\n                    popUpWidth +\n                    \", height=\" +\n                    popUpHeight +\n                    \", top=\" +\n                    top +\n                    \", left=\" +\n                    left,\n            )!\n\n            if (popupWindow.focus) {\n                popupWindow.focus()\n            }\n\n            return popupWindow\n        } catch (e) {\n            if (DEBUG) {\n                Logger.warn(\"Error opening popup, \" + e.message)\n            }\n            this._loginInProgress = false\n            this._acquireTokenInProgress = false\n            return null\n        }\n    }\n\n    _handlePopupError(\n        loginCallback: any,\n        resource: string | undefined | null,\n        error: string,\n        errorDesc: string,\n        loginError: string,\n    ) {\n        if (DEBUG) {\n            Logger.warn(errorDesc)\n        }\n        saveItem(StorageKey.ERROR, error)\n        saveItem(StorageKey.ERROR_DESCRIPTION, errorDesc)\n        saveItem(StorageKey.LOGIN_ERROR, loginError)\n\n        if (resource && this._activeRenewals[resource]) {\n            this._activeRenewals[resource] = null\n        }\n\n        this._loginInProgress = false\n        this._acquireTokenInProgress = false\n\n        if (loginCallback) {\n            loginCallback(errorDesc, null, error)\n        }\n    }\n\n    /**\n     * After authorization, the user will be sent to your specified redirect_uri with the user's bearer token\n     * attached to the URI fragment as an id_token field. It closes popup window after redirection.\n     * @ignore\n     */\n    _loginPopup(urlNavigate: string, resource?: string, callback?: any) {\n        var popupWindow = this._openPopup(urlNavigate, \"login\", 483, 600)\n        var loginCallback = callback || this.config.callback\n\n        if (!popupWindow) {\n            var error = \"Error opening popup\"\n            var errorDesc =\n                \"Popup Window is null. This can happen if you are using IE\"\n            this._handlePopupError(\n                loginCallback,\n                resource,\n                error,\n                errorDesc,\n                errorDesc,\n            )\n            return\n        }\n\n        this._openedWindows.push(popupWindow)\n        const registeredRedirectUri = this.config.redirectUri.split(\"#\")[0]\n\n        var pollTimer = setInterval(() => {\n            if (\n                !popupWindow ||\n                popupWindow.closed ||\n                popupWindow.closed === undefined\n            ) {\n                var error = \"Popup Window closed\"\n                var errorDesc =\n                    \"Popup Window closed by UI action/ Popup Window handle destroyed due to cross zone navigation in IE/Edge\"\n\n                this._handlePopupError(\n                    loginCallback,\n                    resource,\n                    error,\n                    errorDesc,\n                    errorDesc,\n                )\n                clearInterval(pollTimer)\n                return\n            }\n            try {\n                var popUpWindowLocation = popupWindow.location\n                if (\n                    encodeURI(popUpWindowLocation.href).indexOf(\n                        encodeURI(registeredRedirectUri),\n                    ) != -1\n                ) {\n                    this.handleWindowCallback(popUpWindowLocation.hash)\n                    clearInterval(pollTimer)\n                    this._loginInProgress = false\n                    this._acquireTokenInProgress = false\n                    if (DEBUG) {\n                        Logger.info(\"Closing popup window\")\n                    }\n                    this._openedWindows = []\n                    popupWindow.close()\n                    return\n                }\n            } catch (e) {}\n        }, 1)\n    }\n\n    loginInProgress() {\n        return this._loginInProgress\n    }\n\n    /**\n     * Checks for the resource in the cache. By default, cache location is Session Storage\n     * @ignore\n     * @returns {Boolean} 'true' if login is in progress, else returns 'false'.\n     */\n    _hasResource(key) {\n        var keys = getItem(StorageKey.TOKEN_KEYS)\n        return !isEmpty(keys) && keys.indexOf(key + RESOURCE_DELIMETER) > -1\n    }\n\n    /**\n     * Gets token for the specified resource from the cache.\n     * @param {string}   resource A URI that identifies the resource for which the token is requested.\n     * @returns {string} token if if it exists and not expired, otherwise null.\n     */\n    getCachedToken(resource: string): string | undefined {\n        if (!this._hasResource(resource)) return\n\n        const token = getItem(StorageKey.ACCESS_TOKEN_KEY + resource)\n        const expiry = getItem(StorageKey.EXPIRATION_KEY + resource)\n\n        if (expiry && expiry > now() + this.config.expireOffsetSeconds) {\n            return token\n        } else {\n            saveItem(StorageKey.ACCESS_TOKEN_KEY + resource, \"\")\n            saveItem(StorageKey.EXPIRATION_KEY + resource, 0)\n        }\n    }\n\n    /**\n     * User information from idtoken.\n     *  @class User\n     *  @property {string} userName - username assigned from upn or email.\n     *  @property {object} profile - properties parsed from idtoken.\n     */\n\n    /**\n     * @deprecated\n     */\n    getCachedUser() {\n        return this.getUser()\n    }\n\n    /**\n     * Adds the passed callback to the array of callbacks for the specified resource and puts the array on the window object.\n     * @param {string}   resource A URI that identifies the resource for which the token is requested.\n     * @param {string}   expectedState A unique identifier (guid).\n     * @param {tokenCallback} callback - The callback provided by the caller. It will be called with token or error.\n     */\n    registerCallback(expectedState: any, resource: string, callback: any) {\n        this._activeRenewals[resource] = expectedState\n\n        if (!this._callBacksMappedToRenewStates[expectedState]) {\n            this._callBacksMappedToRenewStates[expectedState] = []\n        }\n\n        this._callBacksMappedToRenewStates[expectedState].push(callback)\n\n        if (!this._callBackMappedToRenewStates[expectedState]) {\n            this._callBackMappedToRenewStates[expectedState] = (\n                errorDesc,\n                token,\n                error,\n                tokenType,\n            ) => {\n                this._activeRenewals[resource] = null\n\n                for (\n                    var i = 0;\n                    i <\n                    this._callBacksMappedToRenewStates[expectedState].length;\n                    ++i\n                ) {\n                    try {\n                        this._callBacksMappedToRenewStates[expectedState][i](\n                            errorDesc,\n                            token,\n                            error,\n                            tokenType,\n                        )\n                    } catch (error) {\n                        if (DEBUG) {\n                            Logger.warn(error)\n                        }\n                    }\n                }\n\n                this._callBacksMappedToRenewStates[expectedState] = null\n                this._callBackMappedToRenewStates[expectedState] = null\n            }\n        }\n    }\n\n    // var errorResponse = {error:'', error_description:''};\n    // var token = 'string token';\n    // callback(errorResponse, token)\n    // with callback\n    /**\n     * Acquires access token with hidden iframe\n     * @ignore\n     */\n    _renewToken(resource, callback, responseType = \"token\") {\n        // use iframe to try to renew token\n        // use given resource to create new authz url\n        if (DEBUG) {\n            Logger.info(\"renewToken is called for resource:\" + resource)\n        }\n        var frameHandle = this._addAdalFrame(\"adalRenewFrame\" + resource)\n        var expectedState = guid() + RESOURCE_DELIMETER + resource\n        this.config.state = expectedState\n        // renew happens in iframe, so it keeps javascript context\n        this._renewStates.push(expectedState)\n        if (DEBUG) {\n            Logger.verbose(\"Renew token Expected state: \" + expectedState)\n        }\n        // remove the existing prompt=... query parameter and add prompt=none\n        var urlNavigate = this._urlRemoveQueryStringParameter(\n            this._getNavigateUrl(responseType, resource),\n            \"prompt\",\n        )\n\n        if (responseType === ResponseType.ID_TOKEN) {\n            this._idTokenNonce = guid()\n            saveItem(StorageKey.NONCE_IDTOKEN, this._idTokenNonce, true)\n            urlNavigate += \"&nonce=\" + encodeURIComponent(this._idTokenNonce)\n        }\n\n        urlNavigate = urlNavigate + \"&prompt=none\"\n        urlNavigate = this._addHintParameters(urlNavigate)\n        this.registerCallback(expectedState, resource, callback)\n        if (DEBUG) {\n            Logger.verbosePii(\"Navigate to:\" + urlNavigate)\n        }\n        frameHandle.src = \"about:blank\"\n        this._loadFrameTimeout(\n            urlNavigate,\n            \"adalRenewFrame\" + resource,\n            resource,\n        )\n    }\n\n    /**\n     * Renews idtoken for app's own backend when resource is clientId and calls the callback with token/error\n     * @ignore\n     */\n    _renewIdToken(callback, responseType?: string) {\n        // use iframe to try to renew token\n        if (DEBUG) {\n            Logger.info(\"renewIdToken is called\")\n        }\n        let frameHandle = this._addAdalFrame(\"adalIdTokenFrame\")\n        let expectedState = guid() + RESOURCE_DELIMETER + this.config.clientId\n        this._idTokenNonce = guid()\n        saveItem(StorageKey.NONCE_IDTOKEN, this._idTokenNonce, true)\n        this.config.state = expectedState\n        // renew happens in iframe, so it keeps javascript context\n        this._renewStates.push(expectedState)\n        if (DEBUG) {\n            Logger.verbose(\"Renew Idtoken Expected state: \" + expectedState)\n        }\n        // remove the existing prompt=... query parameter and add prompt=none\n        let resource = responseType || this.config.clientId\n        responseType = responseType || \"id_token\"\n        let urlNavigate = this._urlRemoveQueryStringParameter(\n            this._getNavigateUrl(responseType, resource),\n            \"prompt\",\n        )\n        urlNavigate = urlNavigate + \"&prompt=none\"\n        urlNavigate = this._addHintParameters(urlNavigate)\n        urlNavigate += \"&nonce=\" + encodeURIComponent(this._idTokenNonce)\n        this.registerCallback(expectedState, this.config.clientId, callback)\n        if (DEBUG) {\n            Logger.verbosePii(\"Navigate to:\" + urlNavigate)\n        }\n        frameHandle.src = \"about:blank\"\n        this._loadFrameTimeout(\n            urlNavigate,\n            \"adalIdTokenFrame\",\n            this.config.clientId,\n        )\n    }\n\n    /**\n     * Checks if the authorization endpoint URL contains query string parameters\n     * @ignore\n     */\n    _urlContainsQueryStringParameter(name, url) {\n        // regex to detect pattern of a ? or & followed by the name parameter and an equals character\n        var regex = new RegExp(\"[\\\\?&]\" + name + \"=\")\n        return regex.test(url)\n    }\n\n    /**\n     * Removes the query string parameter from the authorization endpoint URL if it exists\n     * @ignore\n     */\n    _urlRemoveQueryStringParameter(url, name) {\n        // we remove &name=value, name=value& and name=value\n        // &name=value\n        var regex = new RegExp(\"(\\\\&\" + name + \"=)[^&]+\")\n        url = url.replace(regex, \"\")\n        // name=value&\n        regex = new RegExp(\"(\" + name + \"=)[^&]+&\")\n        url = url.replace(regex, \"\")\n        // name=value\n        regex = new RegExp(\"(\" + name + \"=)[^&]+\")\n        url = url.replace(regex, \"\")\n        return url\n    }\n\n    // Calling _loadFrame but with a timeout to signal failure in loadframeStatus. Callbacks are left\n    // registered when network errors occur and subsequent token requests for same resource are registered to the pending request\n    /**\n     * @ignore\n     */\n    _loadFrameTimeout(urlNavigation, frameName, resource) {\n        //set iframe session to pending\n        if (DEBUG) {\n            Logger.verbose(\"Set loading state to pending for: \" + resource)\n        }\n        saveItem(\n            StorageKey.RENEW_STATUS + resource,\n            TokenRenewStatus.InProgress,\n        )\n        this._loadFrame(urlNavigation, frameName)\n\n        setTimeout(() => {\n            if (\n                getItem(StorageKey.RENEW_STATUS + resource) ===\n                TokenRenewStatus.InProgress\n            ) {\n                // fail the iframe session if it's in pending state\n                if (DEBUG) {\n                    Logger.verbose(\n                        \"Loading frame has timed out after: \" +\n                            this.config.loadFrameTimeout / 1000 +\n                            \" seconds for resource \" +\n                            resource,\n                    )\n                }\n                var expectedState = this._activeRenewals[resource]\n\n                if (\n                    expectedState &&\n                    this._callBackMappedToRenewStates[expectedState]\n                ) {\n                    this._callBackMappedToRenewStates[expectedState](\n                        \"Token renewal operation failed due to timeout\",\n                        null,\n                        \"Token Renewal Failed\",\n                    )\n                }\n\n                saveItem(\n                    StorageKey.RENEW_STATUS + resource,\n                    TokenRenewStatus.Canceled,\n                )\n            }\n        }, this.config.loadFrameTimeout)\n    }\n\n    /**\n     * Loads iframe with authorization endpoint URL\n     * @ignore\n     */\n    _loadFrame(urlNavigate, frameName) {\n        // This trick overcomes iframe navigation in IE\n        // IE does not load the page consistently in iframe\n        if (DEBUG) {\n            Logger.info(\"LoadFrame: \" + frameName)\n        }\n        setTimeout(() => {\n            const frameHandle = this._addAdalFrame(frameName) as any\n            if (!frameHandle.src || frameHandle.src === \"about:blank\") {\n                frameHandle.src = urlNavigate\n                this._loadFrame(urlNavigate, frameName)\n            }\n        }, 500)\n    }\n\n    /**\n     * @callback tokenCallback\n     * @param {string} error_description error description returned from AAD if token request fails.\n     * @param {string} token token returned from AAD if token request is successful.\n     * @param {string} error error message returned from AAD if token request fails.\n     */\n\n    /**\n     * Acquires token from the cache if it is not expired. Otherwise sends request to AAD to obtain a new token.\n     * @param {string}   resource  ResourceUri identifying the target resource\n     * @param {tokenCallback} callback -  The callback provided by the caller. It will be called with token or error.\n     */\n    acquireToken(resource, callback) {\n        if (!resource) {\n            const error = \"resource is required\"\n            if (DEBUG) {\n                Logger.warn(error)\n            }\n            callback(error, null, error)\n            return\n        }\n\n        var token = this.getCachedToken(resource)\n\n        if (token) {\n            if (DEBUG) {\n                Logger.info(\n                    \"Token is already in cache for resource:\" + resource,\n                )\n            }\n            callback(null, token, null)\n            return\n        }\n\n        if (\n            !this._user &&\n            !(\n                this.config.extraQueryParameter &&\n                this.config.extraQueryParameter.indexOf(\"login_hint\") !== -1\n            )\n        ) {\n            const error = \"User login is required\"\n            if (DEBUG) {\n                Logger.warn(error)\n            }\n            callback(error, null, error)\n            return\n        }\n\n        // renew attempt with iframe\n        // Already renewing for this resource, callback when we get the token.\n        if (this._activeRenewals[resource]) {\n            // Active renewals contains the state for each renewal.\n            this.registerCallback(\n                this._activeRenewals[resource],\n                resource,\n                callback,\n            )\n        } else {\n            this._requestType = RequestType.RENEW_TOKEN\n            if (resource === this.config.clientId) {\n                // App uses idtoken to send to api endpoints\n                // Default resource is tracked as clientid to store this token\n                if (this._user) {\n                    if (DEBUG) {\n                        Logger.verbose(\"renewing idtoken\")\n                    }\n                    this._renewIdToken(callback)\n                } else {\n                    if (DEBUG) {\n                        Logger.verbose(\"renewing idtoken and access_token\")\n                    }\n                    this._renewIdToken(callback, ResponseType.ID_TOKEN)\n                }\n            } else {\n                if (this._user) {\n                    if (DEBUG) {\n                        Logger.verbose(\"renewing access_token\")\n                    }\n                    this._renewToken(resource, callback)\n                } else {\n                    if (DEBUG) {\n                        Logger.verbose(\"renewing idtoken and access_token\")\n                    }\n                    this._renewToken(resource, callback, ResponseType.ID_TOKEN)\n                }\n            }\n        }\n    }\n\n    /**\n     * Acquires token (interactive flow using a popUp window) by sending request to AAD to obtain a new token.\n     * @param {string}   resource  ResourceUri identifying the target resource\n     * @param {string}   extraQueryParameters  extraQueryParameters to add to the authentication request\n     * @param {tokenCallback} callback -  The callback provided by the caller. It will be called with token or error.\n     */\n    acquireTokenPopup(resource, extraQueryParameters, claims, callback) {\n        if (!this._canAcquireToken(resource)) {\n            return\n        }\n\n        var expectedState = guid() + RESOURCE_DELIMETER + resource\n        this.config.state = expectedState\n        this._renewStates.push(expectedState)\n        this._requestType = RequestType.RENEW_TOKEN\n        if (DEBUG) {\n            Logger.verbose(\"Renew token Expected state: \" + expectedState)\n        }\n        // remove the existing prompt=... query parameter and add prompt=select_account\n        var urlNavigate = this._urlRemoveQueryStringParameter(\n            this._getNavigateUrl(\"token\", resource),\n            \"prompt\",\n        )\n        urlNavigate = urlNavigate + \"&prompt=select_account\"\n\n        if (extraQueryParameters) {\n            urlNavigate += extraQueryParameters\n        }\n\n        if (claims && urlNavigate.indexOf(\"&claims\") === -1) {\n            urlNavigate += \"&claims=\" + encodeURIComponent(claims)\n        } else if (claims && urlNavigate.indexOf(\"&claims\") !== -1) {\n            throw new Error(\"Claims cannot be passed as an extraQueryParameter\")\n        }\n\n        urlNavigate = this._addHintParameters(urlNavigate)\n        this._acquireTokenInProgress = true\n        if (DEBUG) {\n            Logger.info(\n                \"acquireToken interactive is called for the resource \" +\n                    resource,\n            )\n        }\n        this.registerCallback(expectedState, resource, callback)\n        this._loginPopup(urlNavigate, resource, callback)\n    }\n\n    /**\n     * Acquires token (interactive flow using a redirect) by sending request to AAD to obtain a new token. In this case the callback passed in the Authentication\n     * request constructor will be called.\n     * @param {string}   resource  ResourceUri identifying the target resource\n     * @param {string}   extraQueryParameters  extraQueryParameters to add to the authentication request\n     */\n    acquireTokenRedirect(resource, extraQueryParameters, claims) {\n        if (!this._canAcquireToken(resource)) {\n            return\n        }\n\n        const expectedState = guid() + RESOURCE_DELIMETER + resource\n        this.config.state = expectedState\n        if (DEBUG) {\n            Logger.verbose(\"Renew token Expected state: \" + expectedState)\n        }\n\n        // remove the existing prompt=... query parameter and add prompt=select_account\n        var urlNavigate = this._urlRemoveQueryStringParameter(\n            this._getNavigateUrl(\"token\", resource),\n            \"prompt\",\n        )\n        urlNavigate = urlNavigate + \"&prompt=select_account\"\n        if (extraQueryParameters) {\n            urlNavigate += extraQueryParameters\n        }\n\n        if (claims && urlNavigate.indexOf(\"&claims\") === -1) {\n            urlNavigate += \"&claims=\" + encodeURIComponent(claims)\n        } else if (claims && urlNavigate.indexOf(\"&claims\") !== -1) {\n            throw new Error(\"Claims cannot be passed as an extraQueryParameter\")\n        }\n\n        urlNavigate = this._addHintParameters(urlNavigate)\n        this._acquireTokenInProgress = true\n        if (DEBUG) {\n            Logger.info(\n                \"acquireToken interactive is called for the resource \" +\n                    resource,\n            )\n        }\n        saveItem(StorageKey.LOGIN_REQUEST, window.location.href)\n        saveItem(StorageKey.STATE_RENEW, expectedState, true)\n        this.promptUser(urlNavigate)\n    }\n\n    _canAcquireToken(resource: string): boolean {\n        let error: string | undefined\n        if (!resource) {\n            error = \"Resource is required\"\n        } else if (!this._user) {\n            error = \"User login is required\"\n        } else if (this._acquireTokenInProgress) {\n            error = \"Acquire token interactive is already in progress\"\n        }\n        if (error) {\n            if (DEBUG) {\n                Logger.warn(error)\n            }\n            this.config.callback(error, null, error)\n            return false\n        }\n        return true\n    }\n\n    /**\n     * Redirects the browser to Azure AD authorization endpoint.\n     * @param {string}   urlNavigate  Url of the authorization endpoint.\n     */\n    promptUser(urlNavigate: string) {\n        if (urlNavigate) {\n            if (DEBUG) {\n                Logger.infoPii(\"Navigate to:\" + urlNavigate)\n            }\n            window.location.replace(urlNavigate)\n        } else {\n            if (DEBUG) {\n                Logger.info(\"Navigate url is empty\")\n            }\n        }\n    }\n\n    /**\n     * Clears cache items.\n     */\n    clearCache() {\n        saveItem(StorageKey.LOGIN_REQUEST, \"\")\n        saveItem(StorageKey.SESSION_STATE, \"\")\n        saveItem(StorageKey.STATE_LOGIN, \"\")\n        saveItem(StorageKey.STATE_RENEW, \"\")\n        this._renewStates = []\n        saveItem(StorageKey.NONCE_IDTOKEN, \"\")\n        saveItem(StorageKey.IDTOKEN, \"\")\n        saveItem(StorageKey.ERROR, \"\")\n        saveItem(StorageKey.ERROR_DESCRIPTION, \"\")\n        saveItem(StorageKey.LOGIN_ERROR, \"\")\n        saveItem(StorageKey.LOGIN_ERROR, \"\")\n        var keys = getItem(StorageKey.TOKEN_KEYS) as any\n\n        if (!isEmpty(keys)) {\n            keys = keys.split(RESOURCE_DELIMETER)\n            for (var i = 0; i < keys.length && keys[i] !== \"\"; i++) {\n                saveItem(StorageKey.ACCESS_TOKEN_KEY + keys[i], \"\")\n                saveItem(StorageKey.EXPIRATION_KEY + keys[i], 0)\n            }\n        }\n\n        saveItem(StorageKey.TOKEN_KEYS, \"\")\n    }\n\n    /**\n     * Clears cache items for a given resource.\n     * @param {string}  resource a URI that identifies the resource.\n     */\n    clearCacheForResource(resource: string) {\n        saveItem(StorageKey.STATE_RENEW, \"\")\n        saveItem(StorageKey.ERROR, \"\")\n        saveItem(StorageKey.ERROR_DESCRIPTION, \"\")\n\n        if (this._hasResource(resource)) {\n            saveItem(StorageKey.ACCESS_TOKEN_KEY + resource, \"\")\n            saveItem(StorageKey.EXPIRATION_KEY + resource, 0)\n        }\n    }\n\n    /**\n     * Redirects user to logout endpoint.\n     * After logout, it will redirect to postLogoutRedirectUri if added as a property on the config object.\n     */\n    logOut() {\n        this.clearCache()\n        this._user = null\n        let urlNavigate: string\n\n        if (this.config.logOutUri) {\n            urlNavigate = this.config.logOutUri\n        } else {\n            let logout = \"\"\n            if (this.config.postLogoutRedirectUri) {\n                logout =\n                    \"post_logout_redirect_uri=\" +\n                    encodeURIComponent(this.config.postLogoutRedirectUri)\n            }\n\n            urlNavigate =\n                this.config.instance +\n                this.config.tenant +\n                \"/oauth2/logout?\" +\n                logout\n        }\n\n        if (DEBUG) {\n            Logger.infoPii(\"Logout navigate to: \" + urlNavigate)\n        }\n        this.promptUser(urlNavigate)\n    }\n\n    /**\n     * If user object exists, returns it. Else creates a new user object by decoding id_token from the cache.\n     * \n     * @deprecated\n     */\n    getUser() {\n        if (!this._user) {\n            const idToken = getItem(StorageKey.IDTOKEN)\n            if (idToken) {\n                this._user = this._createUser(idToken)\n            }\n        }\n        return this._user\n    }\n\n    /**\n     * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time.\n     * domain_hint can be one of users/organisations which when added skips the email based discovery process of the user.\n     * @ignore\n     */\n    _addHintParameters(urlNavigate) {\n        //If you dont use prompt=none, then if the session does not exist, there will be a failure.\n        //If sid is sent alongside domain or login hints, there will be a failure since request is ambiguous.\n        //If sid is sent with a prompt value other than none or attempt_none, there will be a failure since the request is ambiguous.\n\n        if (this._user && this._user.profile) {\n            if (\n                this._user.profile.sid &&\n                urlNavigate.indexOf(\"&prompt=none\") !== -1\n            ) {\n                // don't add sid twice if user provided it in the extraQueryParameter value\n                if (\n                    !this._urlContainsQueryStringParameter(\"sid\", urlNavigate)\n                ) {\n                    // add sid\n                    urlNavigate +=\n                        \"&sid=\" + encodeURIComponent(this._user.profile.sid)\n                }\n            } else if (this._user.profile.upn) {\n                // don't add login_hint twice if user provided it in the extraQueryParameter value\n                if (\n                    !this._urlContainsQueryStringParameter(\n                        \"login_hint\",\n                        urlNavigate,\n                    )\n                ) {\n                    // add login_hint\n                    urlNavigate +=\n                        \"&login_hint=\" +\n                        encodeURIComponent(this._user.profile.upn)\n                }\n                // don't add domain_hint twice if user provided it in the extraQueryParameter value\n                if (\n                    !this._urlContainsQueryStringParameter(\n                        \"domain_hint\",\n                        urlNavigate,\n                    ) &&\n                    this._user.profile.upn.indexOf(\"@\") > -1\n                ) {\n                    var parts = this._user.profile.upn.split(\"@\")\n                    // local part can include @ in quotes. Sending last part handles that.\n                    urlNavigate +=\n                        \"&domain_hint=\" +\n                        encodeURIComponent(parts[parts.length - 1])\n                }\n            }\n        }\n\n        return urlNavigate\n    }\n\n    /**\n     * Creates a user object by decoding the id_token\n     * @ignore\n     */\n    _createUser(idToken) {\n        const json = this._extractIdToken(idToken)\n        if (!has(json, \"aud\")) {\n            return\n        }\n\n        if (json.aud.toLowerCase() !== this.config.clientId.toLowerCase()) {\n            if (DEBUG) {\n                Logger.warn(\"IdToken has invalid aud field\")\n            }\n        } else {\n            return {\n                userName: json.upn || json.email,\n                profile: json,\n            }\n        }\n    }\n\n    /**\n     * Gets login error\n     * @returns {string} error message related to login.\n     */\n    getLoginError() {\n        return getItem(StorageKey.LOGIN_ERROR)\n    }\n\n    /**\n     * Request info object created from the response received from AAD.\n     *  @class RequestInfo\n     *  @property {object} parameters - object comprising of fields such as id_token/error, session_state, state, e.t.c.\n     *  @property {REQUEST_TYPE} requestType - either LOGIN, RENEW_TOKEN or UNKNOWN.\n     *  @property {boolean} stateMatch - true if state is valid, false otherwise.\n     *  @property {string} stateResponse - unique guid used to match the response with the request.\n     *  @property {boolean} valid - true if requestType contains id_token, access_token or error, false otherwise.\n     */\n\n    /**\n     * Creates a requestInfo object from the URL fragment and returns it.\n     * @returns {RequestInfo} an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\n     */\n    getRequestInfo(hash) {\n        const requestInfo = {\n            valid: false,\n            parameters: {},\n            stateMatch: false,\n            stateResponse: \"\",\n            requestType: RequestType.UNKNOWN,\n        }\n\n        const parameters = deserialize(getHash(hash)) as any\n        if (!parameters) {\n            return requestInfo\n        }\n\n        requestInfo.parameters = parameters\n        if (\n            has(parameters, ERROR_DESCRIPTION) ||\n            has(parameters, ACCESS_TOKEN) ||\n            has(parameters, ID_TOKEN)\n        ) {\n            requestInfo.valid = true\n\n            // which call\n            if (parameters.hasOwnProperty(\"state\")) {\n                if (DEBUG) {\n                    Logger.verbose(\"State: \" + parameters.state)\n                }\n                requestInfo.stateResponse = parameters.state\n            } else {\n                if (DEBUG) {\n                    Logger.warn(\"No state returned\")\n                }\n                return requestInfo\n            }\n\n            // async calls can fire iframe and login request at the same time if developer does not use the API as expected\n            // incoming callback needs to be looked up to find the request type\n            if (this._matchState(requestInfo)) {\n                // loginRedirect or acquireTokenRedirect\n                return requestInfo\n            }\n\n            // external api requests may have many renewtoken requests for different resource\n            if (!requestInfo.stateMatch && window.parent) {\n                requestInfo.requestType = this._requestType\n                for (const state of this._renewStates) {\n                    if (state === requestInfo.stateResponse) {\n                        requestInfo.stateMatch = true\n                        break\n                    }\n                }\n            }\n        }\n        return requestInfo\n    }\n\n    /**\n     * Matches state from the request with the response.\n     * @ignore\n     */\n    _matchState(requestInfo) {\n        const loginStates = getItem(StorageKey.STATE_LOGIN)\n        if (loginStates) {\n            for (const state of loginStates.split(CACHE_DELIMETER)) {\n                if (state === requestInfo.stateResponse) {\n                    requestInfo.requestType = RequestType.LOGIN\n                    requestInfo.stateMatch = true\n                    return true\n                }\n            }\n        }\n\n        const acquireTokenStates = getItem(StorageKey.STATE_RENEW)\n        if (acquireTokenStates) {\n            for (const state of acquireTokenStates.split(CACHE_DELIMETER)) {\n                if (state === requestInfo.stateResponse) {\n                    requestInfo.requestType = RequestType.RENEW_TOKEN\n                    requestInfo.stateMatch = true\n                    return true\n                }\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Saves token or error received in the response from AAD in the cache. In case of id_token, it also creates the user object.\n     */\n    saveTokenFromHash(requestInfo) {\n        if (DEBUG) {\n            Logger.info(\n                \"State status:\" +\n                    requestInfo.stateMatch +\n                    \"; Request type:\" +\n                    requestInfo.requestType,\n            )\n        }\n        saveItem(StorageKey.ERROR, \"\")\n        saveItem(StorageKey.ERROR_DESCRIPTION, \"\")\n\n        var resource = getResourceFromState(requestInfo.stateResponse)\n\n        // Record error\n        if (requestInfo.parameters.hasOwnProperty(ERROR_DESCRIPTION)) {\n            if (DEBUG) {\n                Logger.infoPii(\n                    \"Error :\" +\n                        requestInfo.parameters.error +\n                        \"; Error description:\" +\n                        requestInfo.parameters[ERROR_DESCRIPTION],\n                )\n            }\n            saveItem(StorageKey.ERROR, requestInfo.parameters.error)\n            saveItem(\n                StorageKey.ERROR_DESCRIPTION,\n                requestInfo.parameters[ERROR_DESCRIPTION],\n            )\n\n            if (requestInfo.requestType === RequestType.LOGIN) {\n                this._loginInProgress = false\n                saveItem(\n                    StorageKey.LOGIN_ERROR,\n                    requestInfo.parameters.error_description,\n                )\n            }\n        } else {\n            // It must verify the state from redirect\n            if (requestInfo.stateMatch) {\n                // record tokens to storage if exists\n                if (DEBUG) {\n                    Logger.info(\"State is right\")\n                }\n                if (requestInfo.parameters.hasOwnProperty(SESSION_STATE)) {\n                    saveItem(\n                        StorageKey.SESSION_STATE,\n                        requestInfo.parameters[SESSION_STATE],\n                    )\n                }\n\n                var keys\n\n                if (requestInfo.parameters.hasOwnProperty(ACCESS_TOKEN)) {\n                    if (DEBUG) {\n                        Logger.info(\"Fragment has access token\")\n                    }\n\n                    if (!this._hasResource(resource)) {\n                        keys = getItem(StorageKey.TOKEN_KEYS) || \"\"\n                        saveItem(\n                            StorageKey.TOKEN_KEYS,\n                            keys + resource + RESOURCE_DELIMETER,\n                        )\n                    }\n\n                    // save token with related resource\n                    saveItem(\n                        StorageKey.ACCESS_TOKEN_KEY + resource,\n                        requestInfo.parameters[ACCESS_TOKEN],\n                    )\n                    saveItem(\n                        StorageKey.EXPIRATION_KEY + resource,\n                        expiresIn(requestInfo.parameters[EXPIRES_IN]),\n                    )\n                }\n\n                if (requestInfo.parameters.hasOwnProperty(ID_TOKEN)) {\n                    // this.info(\"Fragment has id token\")\n                    this._loginInProgress = false\n                    this._user = this._createUser(\n                        requestInfo.parameters[ID_TOKEN],\n                    )\n                    if (this._user && this._user.profile) {\n                        if (!matchNonce(this._user)) {\n                            saveItem(\n                                StorageKey.LOGIN_ERROR,\n                                \"Nonce received: \" +\n                                    this._user.profile.nonce +\n                                    \" is not same as requested: \" +\n                                    getItem(StorageKey.NONCE_IDTOKEN),\n                            )\n                            this._user = null\n                        } else {\n                            saveItem(\n                                StorageKey.IDTOKEN,\n                                requestInfo.parameters[ID_TOKEN],\n                            )\n\n                            // Save idtoken as access token for app itself\n                            resource = this.config.loginResource\n                                ? this.config.loginResource\n                                : this.config.clientId\n\n                            if (!this._hasResource(resource)) {\n                                keys = getItem(StorageKey.TOKEN_KEYS) || \"\"\n                                saveItem(\n                                    StorageKey.TOKEN_KEYS,\n                                    keys + resource + RESOURCE_DELIMETER,\n                                )\n                            }\n\n                            saveItem(\n                                StorageKey.ACCESS_TOKEN_KEY + resource,\n                                requestInfo.parameters[ID_TOKEN],\n                            )\n                            saveItem(\n                                StorageKey.EXPIRATION_KEY + resource,\n                                this._user.profile.exp,\n                            )\n                        }\n                    } else {\n                        requestInfo.parameters[\"error\"] = \"invalid id_token\"\n                        requestInfo.parameters[\"error_description\"] =\n                            \"Invalid id_token. id_token: \" +\n                            requestInfo.parameters[ID_TOKEN]\n                        saveItem(StorageKey.ERROR, \"invalid id_token\")\n                        saveItem(\n                            StorageKey.ERROR_DESCRIPTION,\n                            \"Invalid id_token. id_token: \" +\n                                requestInfo.parameters[ID_TOKEN],\n                        )\n                    }\n                }\n            } else {\n                requestInfo.parameters[\"error\"] = \"Invalid_state\"\n                requestInfo.parameters[\"error_description\"] =\n                    \"Invalid_state. state: \" + requestInfo.stateResponse\n                saveItem(StorageKey.ERROR, \"Invalid_state\")\n                saveItem(\n                    StorageKey.ERROR_DESCRIPTION,\n                    \"Invalid_state. state: \" + requestInfo.stateResponse,\n                )\n            }\n        }\n\n        saveItem(StorageKey.RENEW_STATUS + resource, TokenRenewStatus.Completed)\n    }\n\n    /**\n     * Gets resource for given endpoint if mapping is provided with config.\n     */\n    getResourceForEndpoint(endpoint: string): string | undefined {\n        // if user specified list of anonymous endpoints, no need to send token to these endpoints, return null.\n        if (this.config.anonymousEndpoints) {\n            for (let i = 0; i < this.config.anonymousEndpoints.length; i++) {\n                if (endpoint.indexOf(this.config.anonymousEndpoints[i]) > -1) {\n                    return\n                }\n            }\n        }\n\n        if (this.config.endpoints) {\n            for (const configEndpoint in this.config.endpoints) {\n                // configEndpoint is like /api/Todo requested endpoint can be /api/Todo/1\n                if (endpoint.indexOf(configEndpoint) > -1) {\n                    return this.config.endpoints[configEndpoint]\n                }\n            }\n        }\n\n        // default resource will be clientid if nothing specified\n        // App will use idtoken for calls to itself\n        // check if it's staring from http or https, needs to match with app host\n        if (\n            endpoint.indexOf(\"http://\") > -1 ||\n            endpoint.indexOf(\"https://\") > -1\n        ) {\n            if (areSameHost(endpoint, this.config.redirectUri)) {\n                return this.config.loginResource\n            }\n        } else {\n            // in angular level, the url for $http interceptor call could be relative url,\n            // if it's relative call, we'll treat it as app backend call.\n            return this.config.loginResource\n        }\n    }\n\n    /**\n     * This method must be called for processing the response received from AAD. It extracts the hash, processes the token or error, saves it in the cache and calls the registered callbacks with the result.\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\n     */\n    handleWindowCallback(hash: string = window.location.hash) {\n        if (isCallback(hash)) {\n            let self!: Adal\n            let isPopup\n\n            const lastWindow = this._openedWindows[this._openedWindows.length  -1]\n            if (lastWindow && lastWindow.opener && lastWindow.opener._adalInstance) {\n                self = lastWindow.opener._adalInstance\n                isPopup = true\n            } else if (window.parent && (window.parent as any)._adalInstance) {\n                self = (window.parent as any)._adalInstance\n            }\n\n            let requestInfo = self.getRequestInfo(hash) as any\n            let tokenReceivedCallback: any\n\n            if (isPopup || window.parent !== window) {\n                tokenReceivedCallback =\n                    self._callBackMappedToRenewStates[requestInfo.stateResponse]\n            } else {\n                tokenReceivedCallback = self.config.callback\n            }\n\n            self.saveTokenFromHash(requestInfo)\n\n            let token: any\n            let tokenType: any\n            if (\n                requestInfo.requestType === RequestType.RENEW_TOKEN &&\n                window.parent\n            ) {\n                if (DEBUG) {\n                    if (window.parent !== window) {\n                        Logger.verbose(\n                            \"Window is in iframe, acquiring token silently\",\n                        )\n                    } else {\n                        Logger.verbose(\n                            \"acquiring token interactive in progress\",\n                        )\n                    }\n                }\n\n                token =\n                    requestInfo.parameters[ACCESS_TOKEN] ||\n                    requestInfo.parameters[ID_TOKEN]\n                tokenType = ACCESS_TOKEN\n            } else if (requestInfo.requestType === RequestType.LOGIN) {\n                token = requestInfo.parameters[ID_TOKEN]\n                tokenType = ID_TOKEN\n            }\n\n            var errorDesc = requestInfo.parameters[ERROR_DESCRIPTION]\n            var error = requestInfo.parameters[ERROR]\n            try {\n                if (tokenReceivedCallback) {\n                    tokenReceivedCallback(errorDesc, token, error, tokenType)\n                }\n            } catch (err) {\n                if (DEBUG) {\n                    Logger.error(\n                        \"Error occurred in user defined callback function: \" +\n                            err,\n                    )\n                }\n            }\n\n            if (window.parent === window && !isPopup) {\n                if (self.config.navigateToLoginRequestUrl) {\n                    window.location.href = getItem(StorageKey.LOGIN_REQUEST)\n                } else {\n                    window.location.hash = \"\"\n                }\n            }\n        }\n    }\n\n    /**\n     * Constructs the authorization endpoint URL and returns it.\n     * @ignore\n     */\n    _getNavigateUrl(responseType: string, resource?: string) {\n        const urlNavigate =\n            this.config.instance +\n            this.config.tenant +\n            \"/oauth2/authorize\" +\n            serialize(responseType, this.config, resource)\n        if (DEBUG) {\n            Logger.info(\"Navigate url:\" + urlNavigate)\n        }\n        return urlNavigate\n    }\n\n    /**\n     * Returns the decoded id_token.\n     * @ignore\n     */\n    _extractIdToken(encodedIdToken: string) {\n        // id token will be decoded to get the username\n        var decodedToken = this._decodeJwt(encodedIdToken)\n\n        if (!decodedToken) {\n            return\n        }\n\n        try {\n            var base64IdToken = decodedToken.JWSPayload\n            var base64Decoded = this._base64DecodeStringUrlSafe(base64IdToken)\n\n            if (!base64Decoded) {\n                if (DEBUG) {\n                    Logger.info(\n                        \"The returned id_token could not be base64 url safe decoded.\",\n                    )\n                }\n                return\n            }\n\n            // ECMA script has JSON built-in support\n            return JSON.parse(base64Decoded)\n        } catch (err) {\n            if (DEBUG) {\n                Logger.error(\"The returned id_token could not be decoded\", err)\n            }\n        }\n    }\n\n    /**\n     * Decodes a string of data which has been encoded using base-64 encoding.\n     * @ignore\n     */\n    _base64DecodeStringUrlSafe(base64IdToken: string) {\n        base64IdToken = base64IdToken.replace(/-/g, \"+\").replace(/_/g, \"/\")\n        return decodeURIComponent(escape(window.atob(base64IdToken)))\n    }\n\n    /**\n     * Decodes an id token into an object with header, payload and signature fields.\n     * @ignore\n     */\n    // Adal.node js crack function\n    _decodeJwt(jwtToken: string) {\n        if (isEmpty(jwtToken)) return\n\n        var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/\n        var matches = idTokenPartsRegex.exec(jwtToken)\n\n        if (!matches || matches.length < 4) {\n            if (DEBUG) {\n                Logger.warn(\"The returned id_token is not parseable.\")\n            }\n            return\n        }\n\n        return {\n            header: matches[1],\n            JWSPayload: matches[2],\n            JWSSig: matches[3],\n        }\n    }\n\n    /**\n     * Adds the hidden iframe for silent token renewal\n     * @ignore\n     */\n    _addAdalFrame(iframeId: string) {\n        var adalFrame = document.getElementById(iframeId)\n        if (adalFrame) {\n            return adalFrame\n        }\n\n        if (DEBUG) {\n            Logger.info(\"Add adal frame to document:\" + iframeId)\n        }\n        // NOTE: removed special case for legacy opera/IE\n        document.body.insertAdjacentHTML(\n            \"beforeEnd\" as any,\n            `<iframe name=\"${iframeId}\" id=\"${iframeId}\" style=\"display:none\"></iframe>`,\n        )\n        return window.frames && window.frames[iframeId]\n    }\n}\n\n/**\n * Saves the key-value pair in the cache\n * @ignore\n */\nfunction saveItem(key: string, value: any, preserve = false) {\n    if (preserve) {\n        const old = getItem(key) || \"\"\n        Storage.setItem(key, old + value + CACHE_DELIMETER)\n    } else {\n        Storage.setItem(key, value)\n    }\n}\n\nfunction areSameHost(a: string, b: string): boolean {\n    return new URL(a).host === new URL(b).host\n}\n\n/**\n * Searches the value for the given key in the cache\n * @ignore\n */\nfunction getItem(key: string): any {\n    return Storage.getItem(key)\n}\n\n/**\n * Returns the anchor part(#) of the URL\n * @ignore\n */\nfunction getHash(hash: string) {\n    if (hash.indexOf(\"#/\") > -1) {\n        hash = hash.substring(hash.indexOf(\"#/\") + 2)\n    } else if (hash.indexOf(\"#\") > -1) {\n        hash = hash.substring(1)\n    }\n    return hash\n}\n\n/**\n * Checks if the URL fragment contains access token, id token or error_description.\n * @param {string} hash  -  Hash passed from redirect page\n * @returns {Boolean} true if response contains id_token, access_token or error, false otherwise.\n */\nfunction isCallback(hash: string) {\n    const parameters = deserialize(getHash(hash))\n    return (\n        has(parameters, ERROR_DESCRIPTION) ||\n        has(parameters, ACCESS_TOKEN) ||\n        has(parameters, ID_TOKEN)\n    )\n}\n\n/**\n * Parses the query string parameters into a key-value pair object.\n * @ignore\n */\nfunction deserialize(query: string) {\n    var match,\n        pl = /\\+/g, // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=([^&]*)/g,\n        decode = (s: string) => decodeURIComponent(s.replace(pl, \" \")),\n        obj = {}\n    match = search.exec(query)\n\n    while (match) {\n        obj[decode(match[1])] = decode(match[2])\n        match = search.exec(query)\n    }\n\n    return obj\n}\n\n/**\n * Matches nonce from the request with the response.\n */\nfunction matchNonce(user: any): boolean {\n    const requestNonce = getItem(StorageKey.NONCE_IDTOKEN)\n    if (requestNonce) {\n        for (const nonce of requestNonce.split(CACHE_DELIMETER)) {\n            if (nonce === user.profile.nonce) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunction getResourceFromState(state): string {\n    if (state) {\n        var splitIndex = state.indexOf(RESOURCE_DELIMETER)\n        if (splitIndex > -1 && splitIndex + 1 < state.length) {\n            return state.substring(splitIndex + 1)\n        }\n    }\n    return \"\"\n}\n\nfunction isEmpty(str: string): boolean {\n    return typeof str === \"undefined\" || !str || 0 === str.length\n}\n\nfunction has(obj: any, key: string): boolean {\n    return Object.hasOwnProperty.call(obj, key)\n}\n\nfunction now() {\n    return Math.round(Date.now() / 1000)\n}\n\n/**\n * Calculates the expires in value in milliseconds for the acquired token\n */\nfunction expiresIn(expires: any) {\n    // if AAD did not send \"expires_in\" property, use default expiration of 3599 seconds, for some reason AAD sends 3599 as \"expires_in\" value instead of 3600\n    if (!expires) expires = 3599\n    return now() + parseInt(expires, 10)\n}\n\n/**\n * Serializes the parameters for the authorization endpoint URL and returns the serialized uri string.\n */\nfunction serialize(responseType: string, obj: any, resource?: string): string {\n    if (!obj) return \"\"\n\n    const str: string[] = [\n        \"?response_type=\" + responseType,\n        \"client_id=\" + encodeURIComponent(obj.clientId),\n    ]\n    if (resource) {\n        str.push(\"resource=\" + encodeURIComponent(resource))\n    }\n\n    str.push(\"redirect_uri=\" + encodeURIComponent(obj.redirectUri))\n    str.push(\"state=\" + encodeURIComponent(obj.state))\n\n    if (has(obj, \"slice\")) {\n        str.push(\"slice=\" + encodeURIComponent(obj.slice))\n    }\n\n    if (has(obj, \"extraQueryParameter\")) {\n        str.push(obj.extraQueryParameter)\n    }\n\n    const correlationId = obj.correlationId || guid()\n    str.push(\"client-request-id=\" + encodeURIComponent(correlationId))\n\n    return str.join(\"&\")\n}\n\n/**\n * Generates RFC4122 version 4 guid (128 bits)\n * @ignore\n */\nfunction guid() {\n    // RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\n    // pseudo-random numbers.\n    // The algorithm is as follows:\n    //     Set the two most significant bits (bits 6 and 7) of the\n    //        clock_seq_hi_and_reserved to zero and one, respectively.\n    //     Set the four most significant bits (bits 12 through 15) of the\n    //        time_hi_and_version field to the 4-bit version number from\n    //        Section 4.1.3. Version4\n    //     Set all the other bits to randomly (or pseudo-randomly) chosen\n    //     values.\n    // UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\n    // time-low               = 4hexOctet\n    // time-mid               = 2hexOctet\n    // time-high-and-version  = 2hexOctet\n    // clock-seq-and-reserved = hexOctet:\n    // clock-seq-low          = hexOctet\n    // node                   = 6hexOctet\n    // Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n    // y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\n    // y values are 8, 9, A, B\n    let buffer = new Uint8Array(16)\n    crypto.getRandomValues(buffer)\n    //buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n    buffer[6] |= 0x40 //buffer[6] | 01000000 will set the 6 bit to 1.\n    buffer[6] &= 0x4f //buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n    //buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n    buffer[8] |= 0x80 //buffer[8] | 10000000 will set the 7 bit to 1.\n    buffer[8] &= 0xbf //buffer[8] & 10111111 will set the 6 bit to 0.\n    buffer = buffer.map((n) => {\n        let hex = n.toString(16)\n        while (hex.length < 2) {\n            hex = \"0\" + hex\n        }\n        return hex as any\n    })\n\n    return (\n        buffer[0] +\n        buffer[1] +\n        buffer[2] +\n        buffer[3] +\n        \"-\" +\n        buffer[4] +\n        buffer[5] +\n        \"-\" +\n        buffer[6] +\n        buffer[7] +\n        \"-\" +\n        buffer[8] +\n        buffer[9] +\n        \"-\" +\n        buffer[10] +\n        buffer[11] +\n        buffer[12] +\n        buffer[13] +\n        buffer[14] +\n        buffer[15]\n    )\n}\n"],"names":["StorageKey","Storage","supportsStorage","type","storage","window","setItem","getItem","removeItem","localStorage","sessionStorage","LogLevel","LOG_LEVEL_LABELS","[object Object]","Error","Warn","Info","Verbose","Logger","pii","correlationId","undefined","level","log","message","error","containsPii","this","formattedMessage","Date","toUTCString","stack","console","warn","info","verbose","errorPii","warnPii","infoPii","verbosePii","RequestType","ResponseType","TokenRenewStatus","Adal","constructor","options","LOGIN","_adalInstance","config","popUp","instance","loginResource","clientId","laodFrameTimeout","expireOffsetSeconds","anonymousEndpoints","navigateToLoginRequestUrl","tenant","redirectUri","location","href","split","callback","login","_loginInProgress","expectedState","guid","loginStartPage","state","_idTokenNonce","saveItem","LOGIN_REQUEST","LOGIN_ERROR","STATE_LOGIN","NONCE_IDTOKEN","ERROR","ERROR_DESCRIPTION","urlNavigate","_getNavigateUrl","encodeURIComponent","displayCall","_renewStates","push","registerCallback","_loginPopup","promptUser","_openPopup","title","popUpWidth","popUpHeight","left","innerWidth","screenX","top","innerHeight","screenY","popupWindow","open","focus","e","_acquireTokenInProgress","_handlePopupError","loginCallback","resource","errorDesc","loginError","_activeRenewals","_openedWindows","registeredRedirectUri","pollTimer","setInterval","closed","clearInterval","popUpWindowLocation","encodeURI","indexOf","handleWindowCallback","hash","close","loginInProgress","_hasResource","key","keys","TOKEN_KEYS","isEmpty","getCachedToken","token","ACCESS_TOKEN_KEY","expiry","EXPIRATION_KEY","now","getCachedUser","getUser","_callBacksMappedToRenewStates","_callBackMappedToRenewStates","tokenType","i","length","_renewToken","responseType","frameHandle","_addAdalFrame","_urlRemoveQueryStringParameter","ID_TOKEN","_addHintParameters","src","_loadFrameTimeout","_renewIdToken","_urlContainsQueryStringParameter","name","url","RegExp","test","regex","replace","urlNavigation","frameName","RENEW_STATUS","InProgress","_loadFrame","setTimeout","loadFrameTimeout","Canceled","acquireToken","_user","extraQueryParameter","_requestType","RENEW_TOKEN","acquireTokenPopup","extraQueryParameters","claims","_canAcquireToken","acquireTokenRedirect","STATE_RENEW","clearCache","SESSION_STATE","IDTOKEN","clearCacheForResource","logOut","logOutUri","logout","postLogoutRedirectUri","idToken","_createUser","profile","sid","upn","parts","json","_extractIdToken","has","aud","toLowerCase","userName","email","getLoginError","getRequestInfo","requestInfo","valid","parameters","stateMatch","stateResponse","requestType","UNKNOWN","deserialize","getHash","hasOwnProperty","_matchState","parent","loginStates","acquireTokenStates","saveTokenFromHash","expires","splitIndex","substring","getResourceFromState","error_description","parseInt","user","requestNonce","nonce","matchNonce","exp","Completed","getResourceForEndpoint","endpoint","endpoints","configEndpoint","b","URL","host","isCallback","self","isPopup","lastWindow","opener","tokenReceivedCallback","err","obj","str","slice","join","serialize","encodedIdToken","decodedToken","_decodeJwt","base64Decoded","_base64DecodeStringUrlSafe","JWSPayload","JSON","parse","base64IdToken","decodeURIComponent","escape","atob","jwtToken","matches","exec","header","JWSSig","iframeId","document","getElementById","body","insertAdjacentHTML","frames","value","preserve","old","query","match","pl","search","decode","s","Object","call","Math","round","buffer","Uint8Array","crypto","getRandomValues","map","n","hex","toString"],"mappings":"IAAYA,GAAZ,SAAYA,GACRA,+BACAA,2CACAA,uCACAA,iCACAA,iCACAA,qCACAA,qCACAA,2BACAA,yBACAA,qBACAA,6CACAA,qCACAA,iCACAA,yCAdJ,CAAYA,IAAAA,aAsBCC,EAAoB,MAC7B,SAASC,EAAgBC,GACrB,MAAMC,EAAUC,OAAOF,GACvB,QAAKC,IAILA,EAAQE,QADQ,WAAA,YAAA,aAEZF,EAAQG,QAFI,cAKhBH,EAAQI,WALQ,aAMZJ,EAAQG,QANI,cAYpB,OAAIL,EAAgB,gBAAwBO,aACxCP,EAAgB,kBAA0BQ,eACvC,CAACH,YAAcD,cApBO,OCtBrBK,GAAZ,SAAYA,GACRA,qBACAA,mBACAA,mBACAA,yBAJJ,CAAYA,IAAAA,OAOZ,MAAMC,EAAmB,CACrBC,CAACF,EAASG,OAAQ,QAClBD,CAACF,EAASI,MAAO,UACjBF,CAACF,EAASK,MAAO,OACjBH,CAACF,EAASM,SAAU,WAGXC,EAAS,CAClBC,KAAK,EACLC,mBAAeC,EACfC,MAAOX,EAASG,MAQhBS,IACID,EACAE,EACAC,EACAC,GAAc,GAEd,KAAIA,GAAgBC,KAAKR,MAErBG,GAASK,KAAKL,MAAO,CACrB,IACIM,GADY,IAAIC,MAAOC,cAGvB,KACCH,KAAKP,cAAgBO,KAAKP,cAAgB,IAAM,IACjDR,EAAiBU,GACjB,KACAE,EAEAC,IAEAG,GAAoB,aAAeH,EAAMM,OAG7CC,QAAQT,IAAIK,KASpBH,MAAMD,EAAiBC,GACnBE,KAAKJ,IAAIZ,EAASG,MAAOU,EAASC,IAOtCQ,KAAKT,GACDG,KAAKJ,IAAIZ,EAASI,KAAMS,EAAS,OAOrCU,KAAKV,GACDG,KAAKJ,IAAIZ,EAASK,KAAMQ,EAAS,OAOrCW,QAAQX,GACJG,KAAKJ,IAAIZ,EAASM,QAASO,EAAS,OAQxCY,SAASZ,EAAiBC,GACtBE,KAAKJ,IAAIZ,EAASG,MAAOU,EAASC,GAAO,IAO7CY,QAAQb,GACJG,KAAKJ,IAAIZ,EAASI,KAAMS,EAAS,MAAM,IAO3Cc,QAAQd,GACJG,KAAKJ,IAAIZ,EAASK,KAAMQ,EAAS,MAAM,IAO3Ce,WAAWf,GACPG,KAAKJ,IAAIZ,EAASM,QAASO,EAAS,MAAM,KC9FlD,IAAKgB,EAKAC,EAKAC,GAVL,SAAKF,GACDA,gBACAA,4BACAA,oBAHJ,CAAKA,IAAAA,OAKL,SAAKC,GACDA,4BACAA,gBAFJ,CAAKA,IAAAA,OAKL,SAAKC,GACDA,sBACAA,wBACAA,2BAHJ,CAAKA,IAAAA,OAiBL,MAAaC,EAeTC,YAAYC,GACR,GAVJlB,qBAAuB,GACvBA,uBAAmB,EACnBA,8BAA0B,EAC1BA,kBAAsB,GACtBA,oBAAwB,GACxBA,kCAAoC,GACpCA,mCAAqC,GACrCA,kBAAea,EAAYM,MAGlBzC,OAAe0C,cAChB,OAAQ1C,OAAe0C,cAE3BpB,KAAKqB,OAAS,CACVC,OAAO,EACPC,SAAU,qCACVC,cAAeN,EAAQO,SACvBC,iBAAkB,IAClBC,oBAAqB,IACrBC,mBAAoB,GACpBC,2BAA2B,EAC3BC,OAAQ,SACRC,YAAarD,OAAOsD,SAASC,KAAKC,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC3DC,SAAU,UACPjB,GAGH3B,EAAOE,cAAgByB,EAAQzB,cAEjCf,OAAe0C,cAAgBpB,KAMrCoC,QACI,GAAIpC,KAAKqC,iBAIL,YAFI9C,EAAOgB,KAAK,qBAKpBP,KAAKqC,kBAAmB,EAGxB,MAAMC,EAAgBC,IAChBC,EAAiB9D,OAAOsD,SAASC,KACvCjC,KAAKqB,OAAOoB,MAAQH,EACpBtC,KAAK0C,cAAgBH,IAGjBhD,EAAOiB,QACH,mBACI8B,EACA,cACAE,GAGZG,EAAStE,EAAWuE,cAAeJ,GACnCG,EAAStE,EAAWwE,YAAa,IACjCF,EAAStE,EAAWyE,YAAaR,GAAe,GAChDK,EAAStE,EAAW0E,cAAe/C,KAAK0C,eAAe,GACvDC,EAAStE,EAAW2E,MAAO,IAC3BL,EAAStE,EAAW4E,kBAAmB,IACvC,IAAIC,EACAlD,KAAKmD,gBAAgB,YACrB,UACAC,mBAAmBpD,KAAK0C,eAExB1C,KAAKqB,OAAOgC,YAEZrD,KAAKqB,OAAOgC,YAAYH,GACjBlD,KAAKqB,OAAOC,OACnBqB,EAAStE,EAAWyE,YAAa,IACjC9C,KAAKsD,aAAaC,KAAKjB,GACvBtC,KAAKwD,iBACDlB,EACAtC,KAAKqB,OAAOI,SACZzB,KAAKqB,OAAOc,UAEhBnC,KAAKyD,YAAYP,IAEjBlD,KAAK0D,WAAWR,GAQxBS,WACIT,EACAU,EACAC,EACAC,GAEA,IACI,MAAMC,EAAOrF,OAAOsF,WAAa,EAAIH,EAAa,EAAInF,OAAOuF,QACvDC,EACFxF,OAAOyF,YAAc,EAAIL,EAAc,EAAIpF,OAAO0F,QAChDC,EAAc3F,OAAO4F,KACvBpB,EACAU,EACA,SACIC,EACA,YACAC,EACA,SACAI,EACA,UACAH,GAOR,OAJIM,EAAYE,OACZF,EAAYE,QAGTF,EACT,MAAOG,GAML,OAJIjF,EAAOe,KAAK,wBAA0BkE,EAAE3E,SAE5CG,KAAKqC,kBAAmB,EACxBrC,KAAKyE,yBAA0B,QAKvCC,kBACIC,EACAC,EACA9E,EACA+E,EACAC,GAGIvF,EAAOe,KAAKuE,GAEhBlC,EAAStE,EAAW2E,MAAOlD,GAC3B6C,EAAStE,EAAW4E,kBAAmB4B,GACvClC,EAAStE,EAAWwE,YAAaiC,GAE7BF,GAAY5E,KAAK+E,gBAAgBH,KACjC5E,KAAK+E,gBAAgBH,GAAY,MAGrC5E,KAAKqC,kBAAmB,EACxBrC,KAAKyE,yBAA0B,EAE3BE,GACAA,EAAcE,EAAW,KAAM/E,GASvC2D,YAAYP,EAAqB0B,EAAmBzC,GAChD,IAAIkC,EAAcrE,KAAK2D,WAAWT,EAAa,QAAS,IAAK,KACzDyB,EAAgBxC,GAAYnC,KAAKqB,OAAOc,SAE5C,IAAKkC,EAAa,CACd,IACIQ,EACA,4DAQJ,YAPA7E,KAAK0E,kBACDC,EACAC,EALQ,sBAORC,EACAA,GAKR7E,KAAKgF,eAAezB,KAAKc,GACzB,MAAMY,EAAwBjF,KAAKqB,OAAOU,YAAYG,MAAM,KAAK,GAEjE,IAAIgD,EAAYC,YAAY,KACxB,IACKd,GACDA,EAAYe,aACW1F,IAAvB2E,EAAYe,OACd,CACE,IACIP,EACA,0GAUJ,OARA7E,KAAK0E,kBACDC,EACAC,EANQ,sBAQRC,EACAA,QAEJQ,cAAcH,GAGlB,IACI,IAAII,EAAsBjB,EAAYrC,SACtC,IAGU,GAFNuD,UAAUD,EAAoBrD,MAAMuD,QAChCD,UAAUN,IAYd,OATAjF,KAAKyF,qBAAqBH,EAAoBI,MAC9CL,cAAcH,GACdlF,KAAKqC,kBAAmB,EACxBrC,KAAKyE,yBAA0B,EAE3BlF,EAAOgB,KAAK,wBAEhBP,KAAKgF,eAAiB,QACtBX,EAAYsB,QAGlB,MAAOnB,MACV,GAGPoB,kBACI,YAAYvD,iBAQhBwD,aAAaC,GACT,IAAIC,EAAOnH,EAAQP,EAAW2H,YAC9B,OAAQC,EAAQF,IAASA,EAAKP,QAAQM,EArPrB,MAqPkD,EAQvEI,eAAetB,GACX,IAAK5E,KAAK6F,aAAajB,GAAW,OAElC,MAAMuB,EAAQvH,EAAQP,EAAW+H,iBAAmBxB,GAC9CyB,EAASzH,EAAQP,EAAWiI,eAAiB1B,GAEnD,GAAIyB,GAAUA,EAASE,IAAQvG,KAAKqB,OAAOM,oBACvC,OAAOwE,EAEPxD,EAAStE,EAAW+H,iBAAmBxB,EAAU,IACjDjC,EAAStE,EAAWiI,eAAiB1B,EAAU,GAcvD4B,gBACI,YAAYC,UAShBjD,iBAAiBlB,EAAoBsC,EAAkBzC,GACnDnC,KAAK+E,gBAAgBH,GAAYtC,EAE5BtC,KAAK0G,8BAA8BpE,KACpCtC,KAAK0G,8BAA8BpE,GAAiB,IAGxDtC,KAAK0G,8BAA8BpE,GAAeiB,KAAKpB,GAElDnC,KAAK2G,6BAA6BrE,KACnCtC,KAAK2G,6BAA6BrE,GAAiB,CAC/CuC,EACAsB,EACArG,EACA8G,KAEA5G,KAAK+E,gBAAgBH,GAAY,KAEjC,IACI,IAAIiC,EAAI,EACRA,EACA7G,KAAK0G,8BAA8BpE,GAAewE,SAChDD,EAEF,IACI7G,KAAK0G,8BAA8BpE,GAAeuE,GAC9ChC,EACAsB,EACArG,EACA8G,GAEN,MAAO9G,GAEDP,EAAOe,KAAKR,GAKxBE,KAAK0G,8BAA8BpE,GAAiB,KACpDtC,KAAK2G,6BAA6BrE,GAAiB,OAa/DyE,YAAYnC,EAAUzC,EAAU6E,EAAe,SAIvCzH,EAAOgB,KAAK,qCAAuCqE,GAEvD,IAAIqC,EAAcjH,KAAKkH,cAAc,iBAAmBtC,GACpDtC,EAAgBC,IA1VH,IA0ViCqC,EAClD5E,KAAKqB,OAAOoB,MAAQH,EAEpBtC,KAAKsD,aAAaC,KAAKjB,GAEnB/C,EAAOiB,QAAQ,+BAAiC8B,GAGpD,IAAIY,EAAclD,KAAKmH,+BACnBnH,KAAKmD,gBAAgB6D,EAAcpC,GACnC,UAGAoC,IAAiBlG,EAAasG,WAC9BpH,KAAK0C,cAAgBH,IACrBI,EAAStE,EAAW0E,cAAe/C,KAAK0C,eAAe,GACvDQ,GAAe,UAAYE,mBAAmBpD,KAAK0C,gBAIvDQ,EAAclD,KAAKqH,mBADnBnE,GAA4B,gBAE5BlD,KAAKwD,iBAAiBlB,EAAesC,EAAUzC,GAE3C5C,EAAOqB,WAAW,eAAiBsC,GAEvC+D,EAAYK,IAAM,cAClBtH,KAAKuH,kBACDrE,EACA,iBAAmB0B,EACnBA,GAQR4C,cAAcrF,EAAU6E,GAGhBzH,EAAOgB,KAAK,0BAEhB,IAAI0G,EAAcjH,KAAKkH,cAAc,oBACjC5E,EAAgBC,IArYH,IAqYiCvC,KAAKqB,OAAOI,SAC9DzB,KAAK0C,cAAgBH,IACrBI,EAAStE,EAAW0E,cAAe/C,KAAK0C,eAAe,GACvD1C,KAAKqB,OAAOoB,MAAQH,EAEpBtC,KAAKsD,aAAaC,KAAKjB,GAEnB/C,EAAOiB,QAAQ,iCAAmC8B,GAGtD,IAAIsC,EAAWoC,GAAgBhH,KAAKqB,OAAOI,SAEvCyB,EAAclD,KAAKmH,+BACnBnH,KAAKmD,gBAFT6D,EAAeA,GAAgB,WAEQpC,GACnC,UAEJ1B,GAA4B,eAC5BA,EAAclD,KAAKqH,mBAAmBnE,GACtCA,GAAe,UAAYE,mBAAmBpD,KAAK0C,eACnD1C,KAAKwD,iBAAiBlB,EAAetC,KAAKqB,OAAOI,SAAUU,GAEvD5C,EAAOqB,WAAW,eAAiBsC,GAEvC+D,EAAYK,IAAM,cAClBtH,KAAKuH,kBACDrE,EACA,mBACAlD,KAAKqB,OAAOI,UAQpBgG,iCAAiCC,EAAMC,GAGnC,OADY,IAAIC,OAAO,SAAWF,EAAO,KAC5BG,KAAKF,GAOtBR,+BAA+BQ,EAAKD,GAGhC,IAAII,EAAQ,IAAIF,OAAO,OAASF,EAAO,WAQvC,OAPAC,EAAMA,EAAII,QAAQD,EAAO,IAEzBA,EAAQ,IAAIF,OAAO,IAAMF,EAAO,YAChCC,EAAMA,EAAII,QAAQD,EAAO,IAEzBA,EAAQ,IAAIF,OAAO,IAAMF,EAAO,WAC1BC,EAAII,QAAQD,EAAO,IAS7BP,kBAAkBS,EAAeC,EAAWrD,GAGpCrF,EAAOiB,QAAQ,qCAAuCoE,GAE1DjC,EACItE,EAAW6J,aAAetD,EAC1B7D,EAAiBoH,YAErBnI,KAAKoI,WAAWJ,EAAeC,GAE/BI,WAAW,KACP,GACIzJ,EAAQP,EAAW6J,aAAetD,KAClC7D,EAAiBoH,WACnB,CAGM5I,EAAOiB,QACH,sCACIR,KAAKqB,OAAOiH,iBAAmB,IAC/B,yBACA1D,GAGZ,IAAItC,EAAgBtC,KAAK+E,gBAAgBH,GAGrCtC,GACAtC,KAAK2G,6BAA6BrE,IAElCtC,KAAK2G,6BAA6BrE,GAC9B,gDACA,KACA,wBAIRK,EACItE,EAAW6J,aAAetD,EAC1B7D,EAAiBwH,YAG1BvI,KAAKqB,OAAOiH,kBAOnBF,WAAWlF,EAAa+E,GAIhB1I,EAAOgB,KAAK,cAAgB0H,GAEhCI,WAAW,KACP,MAAMpB,EAAcjH,KAAKkH,cAAce,GAClChB,EAAYK,KAA2B,gBAApBL,EAAYK,MAChCL,EAAYK,IAAMpE,EAClBlD,KAAKoI,WAAWlF,EAAa+E,KAElC,KAePO,aAAa5D,EAAUzC,GACnB,IAAKyC,EAAU,CACX,MAAM9E,EAAQ,uBAKd,OAHIP,EAAOe,KAAKR,QAEhBqC,EAASrC,EAAO,KAAMA,GAI1B,IAAIqG,EAAQnG,KAAKkG,eAAetB,GAEhC,GAAIuB,EAOA,OALI5G,EAAOgB,KACH,0CAA4CqE,QAGpDzC,EAAS,KAAMgE,EAAO,MAI1B,KACKnG,KAAKyI,OAEFzI,KAAKqB,OAAOqH,sBAC+C,IAA3D1I,KAAKqB,OAAOqH,oBAAoBlD,QAAQ,eAE9C,CACE,MAAM1F,EAAQ,yBAKd,OAHIP,EAAOe,KAAKR,QAEhBqC,EAASrC,EAAO,KAAMA,GAMtBE,KAAK+E,gBAAgBH,GAErB5E,KAAKwD,iBACDxD,KAAK+E,gBAAgBH,GACrBA,EACAzC,IAGJnC,KAAK2I,aAAe9H,EAAY+H,YAC5BhE,IAAa5E,KAAKqB,OAAOI,SAGrBzB,KAAKyI,OAEDlJ,EAAOiB,QAAQ,oBAEnBR,KAAKwH,cAAcrF,KAGf5C,EAAOiB,QAAQ,qCAEnBR,KAAKwH,cAAcrF,EAAUrB,EAAasG,WAG1CpH,KAAKyI,OAEDlJ,EAAOiB,QAAQ,yBAEnBR,KAAK+G,YAAYnC,EAAUzC,KAGvB5C,EAAOiB,QAAQ,qCAEnBR,KAAK+G,YAAYnC,EAAUzC,EAAUrB,EAAasG,YAYlEyB,kBAAkBjE,EAAUkE,EAAsBC,EAAQ5G,GACtD,GAAKnC,KAAKgJ,iBAAiBpE,GAA3B,CAIA,IAAItC,EAAgBC,IA3mBH,IA2mBiCqC,EAClD5E,KAAKqB,OAAOoB,MAAQH,EACpBtC,KAAKsD,aAAaC,KAAKjB,GACvBtC,KAAK2I,aAAe9H,EAAY+H,YAE5BrJ,EAAOiB,QAAQ,+BAAiC8B,GAGpD,IAAIY,EAAclD,KAAKmH,+BACnBnH,KAAKmD,gBAAgB,QAASyB,GAC9B,UAQJ,GANA1B,GAA4B,yBAExB4F,IACA5F,GAAe4F,GAGfC,IAA8C,IAApC7F,EAAYsC,QAAQ,WAC9BtC,GAAe,WAAaE,mBAAmB2F,WACxCA,IAA8C,IAApC7F,EAAYsC,QAAQ,WACrC,UAAUrG,MAAM,qDAGpB+D,EAAclD,KAAKqH,mBAAmBnE,GACtClD,KAAKyE,yBAA0B,EAE3BlF,EAAOgB,KACH,uDACIqE,GAGZ5E,KAAKwD,iBAAiBlB,EAAesC,EAAUzC,GAC/CnC,KAAKyD,YAAYP,EAAa0B,EAAUzC,IAS5C8G,qBAAqBrE,EAAUkE,EAAsBC,GACjD,IAAK/I,KAAKgJ,iBAAiBpE,GACvB,OAGJ,MAAMtC,EAAgBC,IA1pBL,IA0pBmCqC,EACpD5E,KAAKqB,OAAOoB,MAAQH,EAEhB/C,EAAOiB,QAAQ,+BAAiC8B,GAIpD,IAAIY,EAAclD,KAAKmH,+BACnBnH,KAAKmD,gBAAgB,QAASyB,GAC9B,UAOJ,GALA1B,GAA4B,yBACxB4F,IACA5F,GAAe4F,GAGfC,IAA8C,IAApC7F,EAAYsC,QAAQ,WAC9BtC,GAAe,WAAaE,mBAAmB2F,WACxCA,IAA8C,IAApC7F,EAAYsC,QAAQ,WACrC,UAAUrG,MAAM,qDAGpB+D,EAAclD,KAAKqH,mBAAmBnE,GACtClD,KAAKyE,yBAA0B,EAE3BlF,EAAOgB,KACH,uDACIqE,GAGZjC,EAAStE,EAAWuE,cAAelE,OAAOsD,SAASC,MACnDU,EAAStE,EAAW6K,YAAa5G,GAAe,GAChDtC,KAAK0D,WAAWR,GAGpB8F,iBAAiBpE,GACb,IAAI9E,EAQJ,OAPK8E,EAEO5E,KAAKyI,MAENzI,KAAKyE,0BACZ3E,EAAQ,oDAFRA,EAAQ,yBAFRA,EAAQ,wBAMRA,IAEIP,EAAOe,KAAKR,GAEhBE,KAAKqB,OAAOc,SAASrC,EAAO,KAAMA,OAU1C4D,WAAWR,GACHA,GAEI3D,EAAOoB,QAAQ,eAAiBuC,GAEpCxE,OAAOsD,SAAS+F,QAAQ7E,IAGpB3D,EAAOgB,KAAK,yBAQxB4I,aACIxG,EAAStE,EAAWuE,cAAe,IACnCD,EAAStE,EAAW+K,cAAe,IACnCzG,EAAStE,EAAWyE,YAAa,IACjCH,EAAStE,EAAW6K,YAAa,IACjClJ,KAAKsD,aAAe,GACpBX,EAAStE,EAAW0E,cAAe,IACnCJ,EAAStE,EAAWgL,QAAS,IAC7B1G,EAAStE,EAAW2E,MAAO,IAC3BL,EAAStE,EAAW4E,kBAAmB,IACvCN,EAAStE,EAAWwE,YAAa,IACjCF,EAAStE,EAAWwE,YAAa,IACjC,IAAIkD,EAAOnH,EAAQP,EAAW2H,YAE9B,IAAKC,EAAQF,GAAO,CAChBA,EAAOA,EAAK7D,MAnvBC,KAovBb,IAAK,IAAI2E,EAAI,EAAGA,EAAId,EAAKe,QAAsB,KAAZf,EAAKc,GAAWA,IAC/ClE,EAAStE,EAAW+H,iBAAmBL,EAAKc,GAAI,IAChDlE,EAAStE,EAAWiI,eAAiBP,EAAKc,GAAI,GAItDlE,EAAStE,EAAW2H,WAAY,IAOpCsD,sBAAsB1E,GAClBjC,EAAStE,EAAW6K,YAAa,IACjCvG,EAAStE,EAAW2E,MAAO,IAC3BL,EAAStE,EAAW4E,kBAAmB,IAEnCjD,KAAK6F,aAAajB,KAClBjC,EAAStE,EAAW+H,iBAAmBxB,EAAU,IACjDjC,EAAStE,EAAWiI,eAAiB1B,EAAU,IAQvD2E,SAGI,IAAIrG,EAEJ,GAJAlD,KAAKmJ,aACLnJ,KAAKyI,MAAQ,KAGTzI,KAAKqB,OAAOmI,UACZtG,EAAclD,KAAKqB,OAAOmI,cACvB,CACH,IAAIC,EAAS,GACTzJ,KAAKqB,OAAOqI,wBACZD,EACI,4BACArG,mBAAmBpD,KAAKqB,OAAOqI,wBAGvCxG,EACIlD,KAAKqB,OAAOE,SACZvB,KAAKqB,OAAOS,OACZ,kBACA2H,EAIJlK,EAAOoB,QAAQ,uBAAyBuC,GAE5ClD,KAAK0D,WAAWR,GAQpBuD,UACI,IAAKzG,KAAKyI,MAAO,CACb,MAAMkB,EAAU/K,EAAQP,EAAWgL,SAC/BM,IACA3J,KAAKyI,MAAQzI,KAAK4J,YAAYD,IAGtC,YAAYlB,MAQhBpB,mBAAmBnE,GAKf,GAAIlD,KAAKyI,OAASzI,KAAKyI,MAAMoB,QACzB,GACI7J,KAAKyI,MAAMoB,QAAQC,MACsB,IAAzC5G,EAAYsC,QAAQ,gBAIfxF,KAAKyH,iCAAiC,MAAOvE,KAG9CA,GACI,QAAUE,mBAAmBpD,KAAKyI,MAAMoB,QAAQC,cAEjD9J,KAAKyI,MAAMoB,QAAQE,MAGrB/J,KAAKyH,iCACF,aACAvE,KAIJA,GACI,eACAE,mBAAmBpD,KAAKyI,MAAMoB,QAAQE,OAIzC/J,KAAKyH,iCACF,cACAvE,IAEJlD,KAAKyI,MAAMoB,QAAQE,IAAIvE,QAAQ,MAAQ,GACzC,CACE,IAAIwE,EAAQhK,KAAKyI,MAAMoB,QAAQE,IAAI7H,MAAM,KAEzCgB,GACI,gBACAE,mBAAmB4G,EAAMA,EAAMlD,OAAS,IAKxD,OAAO5D,EAOX0G,YAAYD,GACR,MAAMM,EAAOjK,KAAKkK,gBAAgBP,GAClC,GAAKQ,EAAIF,EAAM,OAIf,OAAIA,EAAKG,IAAIC,gBAAkBrK,KAAKqB,OAAOI,SAAS4I,cAKzC,CACHC,SAAUL,EAAKF,KAAOE,EAAKM,MAC3BV,QAASI,QALT1K,EAAOe,KAAK,iCAcxBkK,gBACI,OAAO5L,EAAQP,EAAWwE,aAiB9B4H,eAAe/E,GACX,MAAMgF,EAAc,CAChBC,OAAO,EACPC,WAAY,GACZC,YAAY,EACZC,cAAe,GACfC,YAAalK,EAAYmK,SAGvBJ,EAAaK,EAAYC,EAAQxF,IACvC,IAAKkF,EACD,OAAOF,EAIX,GADAA,EAAYE,WAAaA,EAErBT,EAAIS,EAj7BQ,sBAk7BZT,EAAIS,EAt7BK,iBAu7BTT,EAAIS,EAr7BD,YAs7BL,CAIE,GAHAF,EAAYC,OAAQ,GAGhBC,EAAWO,eAAe,SAS1B,OAFI5L,EAAOe,KAAK,qBAEToK,EAKX,GAZQnL,EAAOiB,QAAQ,UAAYoK,EAAWnI,OAE1CiI,EAAYI,cAAgBF,EAAWnI,MAUvCzC,KAAKoL,YAAYV,GAEjB,OAAOA,EAIX,IAAKA,EAAYG,YAAcnM,OAAO2M,OAAQ,CAC1CX,EAAYK,YAAc/K,KAAK2I,aAC/B,IAAK,MAAMlG,UAAca,aACrB,GAAIb,IAAUiI,EAAYI,cAAe,CACrCJ,EAAYG,YAAa,EACzB,QAKhB,OAAOH,EAOXU,YAAYV,GACR,MAAMY,EAAc1M,EAAQP,EAAWyE,aACvC,GAAIwI,EACA,IAAK,MAAM7I,KAAS6I,EAAYpJ,MA79BtB,MA89BN,GAAIO,IAAUiI,EAAYI,cAGtB,OAFAJ,EAAYK,YAAclK,EAAYM,MACtCuJ,EAAYG,YAAa,KAMrC,MAAMU,EAAqB3M,EAAQP,EAAW6K,aAC9C,GAAIqC,EACA,IAAK,MAAM9I,KAAS8I,EAAmBrJ,MAx+B7B,MAy+BN,GAAIO,IAAUiI,EAAYI,cAGtB,OAFAJ,EAAYK,YAAclK,EAAY+H,YACtC8B,EAAYG,YAAa,KAMrC,SAMJW,kBAAkBd,GAEVnL,EAAOgB,KACH,gBACImK,EAAYG,WACZ,kBACAH,EAAYK,aAGxBpI,EAAStE,EAAW2E,MAAO,IAC3BL,EAAStE,EAAW4E,kBAAmB,IAEvC,IAuCY8C,EAobD0F,EA3dP7G,EAkcZ,SAA8BnC,GAC1B,GAAIA,EAAO,CACP,IAAIiJ,EAAajJ,EAAM+C,QAx8CN,KAy8CjB,GAAIkG,GAAc,GAAKA,EAAa,EAAIjJ,EAAMqE,OAC1C,OAAOrE,EAAMkJ,UAAUD,EAAa,GAG5C,MAAO,GAzcYE,CAAqBlB,EAAYI,eAG5CJ,EAAYE,WAAWO,eAzgCX,sBA2gCR5L,EAAOoB,QACH,UACI+J,EAAYE,WAAW9K,MACvB,uBACA4K,EAAYE,WAAZ,mBAGZjI,EAAStE,EAAW2E,MAAO0H,EAAYE,WAAW9K,OAClD6C,EACItE,EAAW4E,kBACXyH,EAAYE,WAAZ,mBAGAF,EAAYK,cAAgBlK,EAAYM,QACxCnB,KAAKqC,kBAAmB,EACxBM,EACItE,EAAWwE,YACX6H,EAAYE,WAAWiB,qBAK3BnB,EAAYG,YAGRtL,EAAOgB,KAAK,kBAEZmK,EAAYE,WAAWO,eAriCvB,kBAsiCAxI,EACItE,EAAW+K,cACXsB,EAAYE,WAAZ,eAMJF,EAAYE,WAAWO,eAnjCtB,kBAqjCG5L,EAAOgB,KAAK,6BAGXP,KAAK6F,aAAajB,KACnBmB,EAAOnH,EAAQP,EAAW2H,aAAe,GACzCrD,EACItE,EAAW2H,WACXD,EAAOnB,EAtjCV,MA2jCLjC,EACItE,EAAW+H,iBAAmBxB,EAC9B8F,EAAYE,WAAZ,cAEJjI,EACItE,EAAWiI,eAAiB1B,IA+ZjC6G,EA9Zef,EAAYE,WAAZ,cAgahBa,EAAU,MACjBlF,IAAQuF,SAASL,EAAS,OA7ZjBf,EAAYE,WAAWO,eAzkC5B,cA2kCKnL,KAAKqC,kBAAmB,EACxBrC,KAAKyI,MAAQzI,KAAK4J,YACdc,EAAYE,WAAZ,UAEA5K,KAAKyI,OAASzI,KAAKyI,MAAMoB,QA+WjD,SAAoBkC,GAChB,MAAMC,EAAepN,EAAQP,EAAW0E,eACxC,GAAIiJ,EACA,IAAK,MAAMC,KAASD,EAAa9J,MA57CnB,MA67CV,GAAI+J,IAAUF,EAAKlC,QAAQoC,MACvB,SAIZ,SAvXyBC,CAAWlM,KAAKyI,QAUjB9F,EACItE,EAAWgL,QACXqB,EAAYE,WAAZ,UAQC5K,KAAK6F,aAJVjB,EAAW5E,KAAKqB,OAAOG,cACjBxB,KAAKqB,OAAOG,cACZxB,KAAKqB,OAAOI,YAGdsE,EAAOnH,EAAQP,EAAW2H,aAAe,GACzCrD,EACItE,EAAW2H,WACXD,EAAOnB,EApmClB,MAwmCGjC,EACItE,EAAW+H,iBAAmBxB,EAC9B8F,EAAYE,WAAZ,UAEJjI,EACItE,EAAWiI,eAAiB1B,EAC5B5E,KAAKyI,MAAMoB,QAAQsC,OAjCvBxJ,EACItE,EAAWwE,YACX,mBACI7C,KAAKyI,MAAMoB,QAAQoC,MACnB,8BACArN,EAAQP,EAAW0E,gBAE3B/C,KAAKyI,MAAQ,OA8BjBiC,EAAYE,WAAZ,MAAkC,mBAClCF,EAAYE,WAAZ,kBACI,+BACAF,EAAYE,WAAZ,SACJjI,EAAStE,EAAW2E,MAAO,oBAC3BL,EACItE,EAAW4E,kBACX,+BACIyH,EAAYE,WAAZ,cAKhBF,EAAYE,WAAZ,MAAkC,gBAClCF,EAAYE,WAAZ,kBACI,yBAA2BF,EAAYI,cAC3CnI,EAAStE,EAAW2E,MAAO,iBAC3BL,EACItE,EAAW4E,kBACX,yBAA2ByH,EAAYI,gBAKnDnI,EAAStE,EAAW6J,aAAetD,EAAU7D,EAAiBqL,WAMlEC,uBAAuBC,GAEnB,GAAItM,KAAKqB,OAAOO,mBACZ,IAAK,IAAIiF,EAAI,EAAGA,EAAI7G,KAAKqB,OAAOO,mBAAmBkF,OAAQD,IACvD,GAAIyF,EAAS9G,QAAQxF,KAAKqB,OAAOO,mBAAmBiF,KAAO,EACvD,OAKZ,GAAI7G,KAAKqB,OAAOkL,UACZ,IAAK,MAAMC,UAAuBnL,OAAOkL,UAErC,GAAID,EAAS9G,QAAQgH,IAAmB,EACpC,YAAYnL,OAAOkL,UAAUC,GAQzC,OACIF,EAAS9G,QAAQ,YAAc,GAC/B8G,EAAS9G,QAAQ,aAAe,GAoNZiH,EAlNMzM,KAAKqB,OAAOU,gBAmNnC2K,IAnNaJ,GAmNNK,OAAS,IAAID,IAAID,GAAGE,UAlNdtL,OAAOG,mBADvB,QAMYH,OAAOG,cA4M/B,IAAgCiL,EApM5BhH,qBAAqBC,EAAehH,OAAOsD,SAAS0D,MAChD,GAiOR,SAAoBA,GAChB,MAAMkF,EAAaK,EAAYC,EAAQxF,IACvC,OACIyE,EAAIS,EA/5CY,sBAg6ChBT,EAAIS,EAp6CS,iBAq6CbT,EAAIS,EAn6CG,YA6rCHgC,CAAWlH,GAAO,CAClB,IAAImH,EACAC,EAEJ,MAAMC,EAAa/M,KAAKgF,eAAehF,KAAKgF,eAAe8B,OAAS,GAChEiG,GAAcA,EAAWC,QAAUD,EAAWC,OAAO5L,eACrDyL,EAAOE,EAAWC,OAAO5L,cACzB0L,GAAU,GACHpO,OAAO2M,QAAW3M,OAAO2M,OAAejK,gBAC/CyL,EAAQnO,OAAO2M,OAAejK,eAGlC,IACI6L,EAWA9G,EACAS,EAbA8D,EAAcmC,EAAKpC,eAAe/E,GAIlCuH,EADAH,GAAWpO,OAAO2M,SAAW3M,OAEzBmO,EAAKlG,6BAA6B+D,EAAYI,eAE1B+B,EAAKxL,OAAOc,SAGxC0K,EAAKrB,kBAAkBd,GAKnBA,EAAYK,cAAgBlK,EAAY+H,aACxClK,OAAO2M,QAGC3M,OAAO2M,SAAW3M,OAClBa,EAAOiB,QACH,iDAGJjB,EAAOiB,QACH,2CAKZ2F,EACIuE,EAAYE,WAAZ,cACAF,EAAYE,WAAZ,SACJhE,EA5uCK,gBA6uCE8D,EAAYK,cAAgBlK,EAAYM,QAC/CgF,EAAQuE,EAAYE,WAAZ,SACRhE,EA7uCD,YAgvCH,IAAI/B,EAAY6F,EAAYE,WAAZ,kBACZ9K,EAAQ4K,EAAYE,WAAZ,MACZ,IACQqC,GACAA,EAAsBpI,EAAWsB,EAAOrG,EAAO8G,GAErD,MAAOsG,GAED3N,EAAOO,MACH,qDACIoN,GAKZxO,OAAO2M,SAAW3M,QAAWoO,IACzBD,EAAKxL,OAAOQ,0BACZnD,OAAOsD,SAASC,KAAOrD,EAAQP,EAAWuE,eAE1ClE,OAAOsD,SAAS0D,KAAO,KAUvCvC,gBAAgB6D,EAAsBpC,GAClC,MAAM1B,EACFlD,KAAKqB,OAAOE,SACZvB,KAAKqB,OAAOS,OACZ,oBA2NZ,SAAmBkF,EAAsBmG,EAAUvI,GAC/C,IAAKuI,EAAK,MAAO,GAEjB,MAAMC,EAAgB,CAClB,kBAAoBpG,EACpB,aAAe5D,mBAAmB+J,EAAI1L,WAEtCmD,GACAwI,EAAI7J,KAAK,YAAcH,mBAAmBwB,IAG9CwI,EAAI7J,KAAK,gBAAkBH,mBAAmB+J,EAAIpL,cAClDqL,EAAI7J,KAAK,SAAWH,mBAAmB+J,EAAI1K,QAEvC0H,EAAIgD,EAAK,UACTC,EAAI7J,KAAK,SAAWH,mBAAmB+J,EAAIE,QAG3ClD,EAAIgD,EAAK,wBACTC,EAAI7J,KAAK4J,EAAIzE,qBAGjB,MAAMjJ,EAAgB0N,EAAI1N,eAAiB8C,IAG3C,OAFA6K,EAAI7J,KAAK,qBAAuBH,mBAAmB3D,IAE5C2N,EAAIE,KAAK,KAnPRC,CAAUvG,EAAchH,KAAKqB,OAAQuD,GAIzC,OAFIrF,EAAOgB,KAAK,gBAAkB2C,GAE3BA,EAOXgH,gBAAgBsD,GAEZ,IAAIC,EAAezN,KAAK0N,WAAWF,GAEnC,GAAKC,EAIL,IACI,IACIE,EAAgB3N,KAAK4N,2BADLH,EAAaI,YAGjC,OAAKF,EAUEG,KAAKC,MAAMJ,QARVpO,EAAOgB,KACH,+DAQd,MAAO2M,GAED3N,EAAOO,MAAM,6CAA8CoN,IASvEU,2BAA2BI,GAEvB,OADAA,EAAgBA,EAAcjG,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KACxDkG,mBAAmBC,OAAOxP,OAAOyP,KAAKH,KAQjDN,WAAWU,GACP,IAAInI,EAAQmI,GAAZ,CAEA,IACIC,EADoB,uCACQC,KAAKF,GAErC,GAAKC,KAAWA,EAAQvH,OAAS,GAOjC,MAAO,CACHyH,OAAQF,EAAQ,GAChBR,WAAYQ,EAAQ,GACpBG,OAAQH,EAAQ,IARZ9O,EAAOe,KAAK,4CAgBxB4G,cAAcuH,GAEV,OADgBC,SAASC,eAAeF,KAMpClP,EAAOgB,KAAK,8BAAgCkO,GAGhDC,SAASE,KAAKC,mBACV,6BACiBJ,UAAiBA,qCAE/B/P,OAAOoQ,QAAUpQ,OAAOoQ,OAAOL,KAQ9C,SAAS9L,EAASmD,EAAaiJ,EAAYC,GAAW,GAClD,GAAIA,EAAU,CACV,MAAMC,EAAMrQ,EAAQkH,IAAQ,GAC5BxH,EAAQK,QAAQmH,EAAKmJ,EAAMF,EAr3Cb,WAu3CdzQ,EAAQK,QAAQmH,EAAKiJ,GAY7B,SAASnQ,EAAQkH,GACb,OAAOxH,EAAQM,QAAQkH,GAO3B,SAASoF,EAAQxF,GAMb,OALIA,EAAKF,QAAQ,OAAS,EACtBE,EAAOA,EAAKiG,UAAUjG,EAAKF,QAAQ,MAAQ,GACpCE,EAAKF,QAAQ,MAAQ,IAC5BE,EAAOA,EAAKiG,UAAU,IAEnBjG,EAqBX,SAASuF,EAAYiE,GACjB,IAAIC,EACAC,EAAK,MACLC,EAAS,oBACTC,EAAUC,GAActB,mBAAmBsB,EAAExH,QAAQqH,EAAI,MACzDjC,EAAM,GAGV,IAFAgC,EAAQE,EAAOf,KAAKY,GAEbC,GACHhC,EAAImC,EAAOH,EAAM,KAAOG,EAAOH,EAAM,IACrCA,EAAQE,EAAOf,KAAKY,GAGxB,OAAO/B,EA4BX,SAASlH,EAAQmH,GACb,YAAsB,IAARA,IAAwBA,GAAO,IAAMA,EAAItG,OAG3D,SAASqD,EAAIgD,EAAUrH,GACnB,OAAO0J,OAAOrE,eAAesE,KAAKtC,EAAKrH,GAG3C,SAASS,IACL,OAAOmJ,KAAKC,MAAMzP,KAAKqG,MAAQ,KA+CnC,SAAShE,IAqBL,IAAIqN,EAAS,IAAIC,WAAW,IAgB5B,OAfAC,OAAOC,gBAAgBH,GAEvBA,EAAO,IAAM,GACbA,EAAO,IAAM,GAEbA,EAAO,IAAM,IACbA,EAAO,IAAM,IACbA,EAASA,EAAOI,IAAKC,IACjB,IAAIC,EAAMD,EAAEE,SAAS,IACrB,KAAOD,EAAIpJ,OAAS,GAChBoJ,EAAM,IAAMA,EAEhB,OAAOA,IAIPN,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACP,IACAA,EAAO,GACPA,EAAO,GACP,IACAA,EAAO,GACPA,EAAO,GACP,IACAA,EAAO,GACPA,EAAO,GACP,IACAA,EAAO,IACPA,EAAO,IACPA,EAAO,IACPA,EAAO,IACPA,EAAO,IACPA,EAAO"}